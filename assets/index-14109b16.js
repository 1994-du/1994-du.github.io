(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const l of document.querySelectorAll('link[rel="modulepreload"]'))r(l);new MutationObserver(l=>{for(const s of l)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function n(l){const s={};return l.integrity&&(s.integrity=l.integrity),l.referrerPolicy&&(s.referrerPolicy=l.referrerPolicy),l.crossOrigin==="use-credentials"?s.credentials="include":l.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(l){if(l.ep)return;l.ep=!0;const s=n(l);fetch(l.href,s)}})();/**
* @vue/shared v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function Jr(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return n=>n in t}const re={},Jt=[],Xe=()=>{},Po=()=>!1,er=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),qr=e=>e.startsWith("onUpdate:"),Te=Object.assign,Qr=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},Ro=Object.prototype.hasOwnProperty,z=(e,t)=>Ro.call(e,t),Y=Array.isArray,qt=e=>Pn(e)==="[object Map]",tr=e=>Pn(e)==="[object Set]",Ns=e=>Pn(e)==="[object Date]",B=e=>typeof e=="function",me=e=>typeof e=="string",rt=e=>typeof e=="symbol",oe=e=>e!==null&&typeof e=="object",Wl=e=>(oe(e)||B(e))&&B(e.then)&&B(e.catch),jl=Object.prototype.toString,Pn=e=>jl.call(e),Mo=e=>Pn(e).slice(8,-1),Vl=e=>Pn(e)==="[object Object]",Zr=e=>me(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,_n=Jr(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),nr=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Do=/-(\w)/g,St=nr(e=>e.replace(Do,(t,n)=>n?n.toUpperCase():"")),Fo=/\B([A-Z])/g,Ht=nr(e=>e.replace(Fo,"-$1").toLowerCase()),Hl=nr(e=>e.charAt(0).toUpperCase()+e.slice(1)),hr=nr(e=>e?`on${Hl(e)}`:""),Nt=(e,t)=>!Object.is(e,t),$n=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},Kl=(e,t,n,r=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:r,value:n})},Yl=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Ss;const rr=()=>Ss||(Ss=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function zr(e){if(Y(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],l=me(r)?Uo(r):zr(r);if(l)for(const s in l)t[s]=l[s]}return t}else if(me(e)||oe(e))return e}const ko=/;(?![^(]*\))/g,wo=/:([^]+)/,xo=/\/\*[^]*?\*\//g;function Uo(e){const t={};return e.replace(xo,"").split(ko).forEach(n=>{if(n){const r=n.split(wo);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t}function es(e){let t="";if(me(e))t=e;else if(Y(e))for(let n=0;n<e.length;n++){const r=es(e[n]);r&&(t+=r+" ")}else if(oe(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const $o="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",Wo=Jr($o);function Gl(e){return!!e||e===""}function jo(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=sr(e[r],t[r]);return n}function sr(e,t){if(e===t)return!0;let n=Ns(e),r=Ns(t);if(n||r)return n&&r?e.getTime()===t.getTime():!1;if(n=rt(e),r=rt(t),n||r)return e===t;if(n=Y(e),r=Y(t),n||r)return n&&r?jo(e,t):!1;if(n=oe(e),r=oe(t),n||r){if(!n||!r)return!1;const l=Object.keys(e).length,s=Object.keys(t).length;if(l!==s)return!1;for(const i in e){const o=e.hasOwnProperty(i),a=t.hasOwnProperty(i);if(o&&!a||!o&&a||!sr(e[i],t[i]))return!1}}return String(e)===String(t)}function Vo(e,t){return e.findIndex(n=>sr(n,t))}const Bl=e=>!!(e&&e.__v_isRef===!0),$t=e=>me(e)?e:e==null?"":Y(e)||oe(e)&&(e.toString===jl||!B(e.toString))?Bl(e)?$t(e.value):JSON.stringify(e,Xl,2):String(e),Xl=(e,t)=>Bl(t)?Xl(e,t.value):qt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[r,l],s)=>(n[pr(r,s)+" =>"]=l,n),{})}:tr(t)?{[`Set(${t.size})`]:[...t.values()].map(n=>pr(n))}:rt(t)?pr(t):oe(t)&&!Y(t)&&!Vl(t)?String(t):t,pr=(e,t="")=>{var n;return rt(e)?`Symbol(${(n=e.description)!=null?n:t})`:e};/**
* @vue/reactivity v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let xe;class Jl{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=xe,!t&&xe&&(this.index=(xe.scopes||(xe.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].pause();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let t,n;if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].resume();for(t=0,n=this.effects.length;t<n;t++)this.effects[t].resume()}}run(t){if(this._active){const n=xe;try{return xe=this,t()}finally{xe=n}}}on(){xe=this}off(){xe=this.parent}stop(t){if(this._active){this._active=!1;let n,r;for(n=0,r=this.effects.length;n<r;n++)this.effects[n].stop();for(this.effects.length=0,n=0,r=this.cleanups.length;n<r;n++)this.cleanups[n]();if(this.cleanups.length=0,this.scopes){for(n=0,r=this.scopes.length;n<r;n++)this.scopes[n].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!t){const l=this.parent.scopes.pop();l&&l!==this&&(this.parent.scopes[this.index]=l,l.index=this.index)}this.parent=void 0}}}function Ho(e){return new Jl(e)}function Ko(){return xe}let le;const gr=new WeakSet;class ql{constructor(t){this.fn=t,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,xe&&xe.active&&xe.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,gr.has(this)&&(gr.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||Zl(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,Cs(this),zl(this);const t=le,n=Je;le=this,Je=!0;try{return this.fn()}finally{ei(this),le=t,Je=n,this.flags&=-3}}stop(){if(this.flags&1){for(let t=this.deps;t;t=t.nextDep)rs(t);this.deps=this.depsTail=void 0,Cs(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?gr.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Ar(this)&&this.run()}get dirty(){return Ar(this)}}let Ql=0,mn,hn;function Zl(e,t=!1){if(e.flags|=8,t){e.next=hn,hn=e;return}e.next=mn,mn=e}function ts(){Ql++}function ns(){if(--Ql>0)return;if(hn){let t=hn;for(hn=void 0;t;){const n=t.next;t.next=void 0,t.flags&=-9,t=n}}let e;for(;mn;){let t=mn;for(mn=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(r){e||(e=r)}t=n}}if(e)throw e}function zl(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function ei(e){let t,n=e.depsTail,r=n;for(;r;){const l=r.prevDep;r.version===-1?(r===n&&(n=l),rs(r),Yo(r)):t=r,r.dep.activeLink=r.prevActiveLink,r.prevActiveLink=void 0,r=l}e.deps=t,e.depsTail=n}function Ar(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(ti(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function ti(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===vn))return;e.globalVersion=vn;const t=e.dep;if(e.flags|=2,t.version>0&&!e.isSSR&&e.deps&&!Ar(e)){e.flags&=-3;return}const n=le,r=Je;le=e,Je=!0;try{zl(e);const l=e.fn(e._value);(t.version===0||Nt(l,e._value))&&(e._value=l,t.version++)}catch(l){throw t.version++,l}finally{le=n,Je=r,ei(e),e.flags&=-3}}function rs(e,t=!1){const{dep:n,prevSub:r,nextSub:l}=e;if(r&&(r.nextSub=l,e.prevSub=void 0),l&&(l.prevSub=r,e.nextSub=void 0),n.subs===e&&(n.subs=r,!r&&n.computed)){n.computed.flags&=-5;for(let s=n.computed.deps;s;s=s.nextDep)rs(s,!0)}!t&&!--n.sc&&n.map&&n.map.delete(n.key)}function Yo(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}let Je=!0;const ni=[];function At(){ni.push(Je),Je=!1}function Pt(){const e=ni.pop();Je=e===void 0?!0:e}function Cs(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const n=le;le=void 0;try{t()}finally{le=n}}}let vn=0;class Go{constructor(t,n){this.sub=t,this.dep=n,this.version=n.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class ss{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0}track(t){if(!le||!Je||le===this.computed)return;let n=this.activeLink;if(n===void 0||n.sub!==le)n=this.activeLink=new Go(le,this),le.deps?(n.prevDep=le.depsTail,le.depsTail.nextDep=n,le.depsTail=n):le.deps=le.depsTail=n,ri(n);else if(n.version===-1&&(n.version=this.version,n.nextDep)){const r=n.nextDep;r.prevDep=n.prevDep,n.prevDep&&(n.prevDep.nextDep=r),n.prevDep=le.depsTail,n.nextDep=void 0,le.depsTail.nextDep=n,le.depsTail=n,le.deps===n&&(le.deps=r)}return n}trigger(t){this.version++,vn++,this.notify(t)}notify(t){ts();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{ns()}}}function ri(e){if(e.dep.sc++,e.sub.flags&4){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let r=t.deps;r;r=r.nextDep)ri(r)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),e.dep.subs=e}}const Pr=new WeakMap,jt=Symbol(""),Rr=Symbol(""),Tn=Symbol("");function ye(e,t,n){if(Je&&le){let r=Pr.get(e);r||Pr.set(e,r=new Map);let l=r.get(n);l||(r.set(n,l=new ss),l.map=r,l.key=n),l.track()}}function mt(e,t,n,r,l,s){const i=Pr.get(e);if(!i){vn++;return}const o=a=>{a&&a.trigger()};if(ts(),t==="clear")i.forEach(o);else{const a=Y(e),d=a&&Zr(n);if(a&&n==="length"){const _=Number(r);i.forEach((h,b)=>{(b==="length"||b===Tn||!rt(b)&&b>=_)&&o(h)})}else switch((n!==void 0||i.has(void 0))&&o(i.get(n)),d&&o(i.get(Tn)),t){case"add":a?d&&o(i.get("length")):(o(i.get(jt)),qt(e)&&o(i.get(Rr)));break;case"delete":a||(o(i.get(jt)),qt(e)&&o(i.get(Rr)));break;case"set":qt(e)&&o(i.get(jt));break}}ns()}function Yt(e){const t=Z(e);return t===e?t:(ye(t,"iterate",Tn),Ve(e)?t:t.map(Oe))}function lr(e){return ye(e=Z(e),"iterate",Tn),e}const Bo={__proto__:null,[Symbol.iterator](){return br(this,Symbol.iterator,Oe)},concat(...e){return Yt(this).concat(...e.map(t=>Y(t)?Yt(t):t))},entries(){return br(this,"entries",e=>(e[1]=Oe(e[1]),e))},every(e,t){return ut(this,"every",e,t,void 0,arguments)},filter(e,t){return ut(this,"filter",e,t,n=>n.map(Oe),arguments)},find(e,t){return ut(this,"find",e,t,Oe,arguments)},findIndex(e,t){return ut(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return ut(this,"findLast",e,t,Oe,arguments)},findLastIndex(e,t){return ut(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return ut(this,"forEach",e,t,void 0,arguments)},includes(...e){return Er(this,"includes",e)},indexOf(...e){return Er(this,"indexOf",e)},join(e){return Yt(this).join(e)},lastIndexOf(...e){return Er(this,"lastIndexOf",e)},map(e,t){return ut(this,"map",e,t,void 0,arguments)},pop(){return ln(this,"pop")},push(...e){return ln(this,"push",e)},reduce(e,...t){return As(this,"reduce",e,t)},reduceRight(e,...t){return As(this,"reduceRight",e,t)},shift(){return ln(this,"shift")},some(e,t){return ut(this,"some",e,t,void 0,arguments)},splice(...e){return ln(this,"splice",e)},toReversed(){return Yt(this).toReversed()},toSorted(e){return Yt(this).toSorted(e)},toSpliced(...e){return Yt(this).toSpliced(...e)},unshift(...e){return ln(this,"unshift",e)},values(){return br(this,"values",Oe)}};function br(e,t,n){const r=lr(e),l=r[t]();return r!==e&&!Ve(e)&&(l._next=l.next,l.next=()=>{const s=l._next();return s.value&&(s.value=n(s.value)),s}),l}const Xo=Array.prototype;function ut(e,t,n,r,l,s){const i=lr(e),o=i!==e&&!Ve(e),a=i[t];if(a!==Xo[t]){const h=a.apply(e,s);return o?Oe(h):h}let d=n;i!==e&&(o?d=function(h,b){return n.call(this,Oe(h),b,e)}:n.length>2&&(d=function(h,b){return n.call(this,h,b,e)}));const _=a.call(i,d,r);return o&&l?l(_):_}function As(e,t,n,r){const l=lr(e);let s=n;return l!==e&&(Ve(e)?n.length>3&&(s=function(i,o,a){return n.call(this,i,o,a,e)}):s=function(i,o,a){return n.call(this,i,Oe(o),a,e)}),l[t](s,...r)}function Er(e,t,n){const r=Z(e);ye(r,"iterate",Tn);const l=r[t](...n);return(l===-1||l===!1)&&as(n[0])?(n[0]=Z(n[0]),r[t](...n)):l}function ln(e,t,n=[]){At(),ts();const r=Z(e)[t].apply(e,n);return ns(),Pt(),r}const Jo=Jr("__proto__,__v_isRef,__isVue"),si=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(rt));function qo(e){rt(e)||(e=String(e));const t=Z(this);return ye(t,"has",e),t.hasOwnProperty(e)}class li{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,r){if(n==="__v_skip")return t.__v_skip;const l=this._isReadonly,s=this._isShallow;if(n==="__v_isReactive")return!l;if(n==="__v_isReadonly")return l;if(n==="__v_isShallow")return s;if(n==="__v_raw")return r===(l?s?ia:ci:s?ai:oi).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(r)?t:void 0;const i=Y(t);if(!l){let a;if(i&&(a=Bo[n]))return a;if(n==="hasOwnProperty")return qo}const o=Reflect.get(t,n,Ie(t)?t:r);return(rt(n)?si.has(n):Jo(n))||(l||ye(t,"get",n),s)?o:Ie(o)?i&&Zr(n)?o:o.value:oe(o)?l?ui(o):is(o):o}}class ii extends li{constructor(t=!1){super(!1,t)}set(t,n,r,l){let s=t[n];if(!this._isShallow){const a=Vt(s);if(!Ve(r)&&!Vt(r)&&(s=Z(s),r=Z(r)),!Y(t)&&Ie(s)&&!Ie(r))return a?!1:(s.value=r,!0)}const i=Y(t)&&Zr(n)?Number(n)<t.length:z(t,n),o=Reflect.set(t,n,r,Ie(t)?t:l);return t===Z(l)&&(i?Nt(r,s)&&mt(t,"set",n,r):mt(t,"add",n,r)),o}deleteProperty(t,n){const r=z(t,n);t[n];const l=Reflect.deleteProperty(t,n);return l&&r&&mt(t,"delete",n,void 0),l}has(t,n){const r=Reflect.has(t,n);return(!rt(n)||!si.has(n))&&ye(t,"has",n),r}ownKeys(t){return ye(t,"iterate",Y(t)?"length":jt),Reflect.ownKeys(t)}}class Qo extends li{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const Zo=new ii,zo=new Qo,ea=new ii(!0);const Mr=e=>e,Fn=e=>Reflect.getPrototypeOf(e);function ta(e,t,n){return function(...r){const l=this.__v_raw,s=Z(l),i=qt(s),o=e==="entries"||e===Symbol.iterator&&i,a=e==="keys"&&i,d=l[e](...r),_=n?Mr:t?Dr:Oe;return!t&&ye(s,"iterate",a?Rr:jt),{next(){const{value:h,done:b}=d.next();return b?{value:h,done:b}:{value:o?[_(h[0]),_(h[1])]:_(h),done:b}},[Symbol.iterator](){return this}}}}function kn(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function na(e,t){const n={get(l){const s=this.__v_raw,i=Z(s),o=Z(l);e||(Nt(l,o)&&ye(i,"get",l),ye(i,"get",o));const{has:a}=Fn(i),d=t?Mr:e?Dr:Oe;if(a.call(i,l))return d(s.get(l));if(a.call(i,o))return d(s.get(o));s!==i&&s.get(l)},get size(){const l=this.__v_raw;return!e&&ye(Z(l),"iterate",jt),Reflect.get(l,"size",l)},has(l){const s=this.__v_raw,i=Z(s),o=Z(l);return e||(Nt(l,o)&&ye(i,"has",l),ye(i,"has",o)),l===o?s.has(l):s.has(l)||s.has(o)},forEach(l,s){const i=this,o=i.__v_raw,a=Z(o),d=t?Mr:e?Dr:Oe;return!e&&ye(a,"iterate",jt),o.forEach((_,h)=>l.call(s,d(_),d(h),i))}};return Te(n,e?{add:kn("add"),set:kn("set"),delete:kn("delete"),clear:kn("clear")}:{add(l){!t&&!Ve(l)&&!Vt(l)&&(l=Z(l));const s=Z(this);return Fn(s).has.call(s,l)||(s.add(l),mt(s,"add",l,l)),this},set(l,s){!t&&!Ve(s)&&!Vt(s)&&(s=Z(s));const i=Z(this),{has:o,get:a}=Fn(i);let d=o.call(i,l);d||(l=Z(l),d=o.call(i,l));const _=a.call(i,l);return i.set(l,s),d?Nt(s,_)&&mt(i,"set",l,s):mt(i,"add",l,s),this},delete(l){const s=Z(this),{has:i,get:o}=Fn(s);let a=i.call(s,l);a||(l=Z(l),a=i.call(s,l)),o&&o.call(s,l);const d=s.delete(l);return a&&mt(s,"delete",l,void 0),d},clear(){const l=Z(this),s=l.size!==0,i=l.clear();return s&&mt(l,"clear",void 0,void 0),i}}),["keys","values","entries",Symbol.iterator].forEach(l=>{n[l]=ta(l,e,t)}),n}function ls(e,t){const n=na(e,t);return(r,l,s)=>l==="__v_isReactive"?!e:l==="__v_isReadonly"?e:l==="__v_raw"?r:Reflect.get(z(n,l)&&l in r?n:r,l,s)}const ra={get:ls(!1,!1)},sa={get:ls(!1,!0)},la={get:ls(!0,!1)};const oi=new WeakMap,ai=new WeakMap,ci=new WeakMap,ia=new WeakMap;function oa(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function aa(e){return e.__v_skip||!Object.isExtensible(e)?0:oa(Mo(e))}function is(e){return Vt(e)?e:os(e,!1,Zo,ra,oi)}function ca(e){return os(e,!1,ea,sa,ai)}function ui(e){return os(e,!0,zo,la,ci)}function os(e,t,n,r,l){if(!oe(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=aa(e);if(i===0)return e;const o=new Proxy(e,i===2?r:n);return l.set(e,o),o}function Qt(e){return Vt(e)?Qt(e.__v_raw):!!(e&&e.__v_isReactive)}function Vt(e){return!!(e&&e.__v_isReadonly)}function Ve(e){return!!(e&&e.__v_isShallow)}function as(e){return e?!!e.__v_raw:!1}function Z(e){const t=e&&e.__v_raw;return t?Z(t):e}function ua(e){return!z(e,"__v_skip")&&Object.isExtensible(e)&&Kl(e,"__v_skip",!0),e}const Oe=e=>oe(e)?is(e):e,Dr=e=>oe(e)?ui(e):e;function Ie(e){return e?e.__v_isRef===!0:!1}function Ot(e){return di(e,!1)}function fi(e){return di(e,!0)}function di(e,t){return Ie(e)?e:new fa(e,t)}class fa{constructor(t,n){this.dep=new ss,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?t:Z(t),this._value=n?t:Oe(t),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(t){const n=this._rawValue,r=this.__v_isShallow||Ve(t)||Vt(t);t=r?t:Z(t),Nt(t,n)&&(this._rawValue=t,this._value=r?t:Oe(t),this.dep.trigger())}}function fn(e){return Ie(e)?e.value:e}const da={get:(e,t,n)=>t==="__v_raw"?e:fn(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const l=e[t];return Ie(l)&&!Ie(n)?(l.value=n,!0):Reflect.set(e,t,n,r)}};function _i(e){return Qt(e)?e:new Proxy(e,da)}class _a{constructor(t,n,r){this.fn=t,this.setter=n,this._value=void 0,this.dep=new ss(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=vn-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!n,this.isSSR=r}notify(){if(this.flags|=16,!(this.flags&8)&&le!==this)return Zl(this,!0),!0}get value(){const t=this.dep.track();return ti(this),t&&(t.version=this.dep.version),this._value}set value(t){this.setter&&this.setter(t)}}function ma(e,t,n=!1){let r,l;return B(e)?r=e:(r=e.get,l=e.set),new _a(r,l,n)}const wn={},Kn=new WeakMap;let Wt;function ha(e,t=!1,n=Wt){if(n){let r=Kn.get(n);r||Kn.set(n,r=[]),r.push(e)}}function pa(e,t,n=re){const{immediate:r,deep:l,once:s,scheduler:i,augmentJob:o,call:a}=n,d=E=>l?E:Ve(E)||l===!1||l===0?ht(E,1):ht(E);let _,h,b,I,M=!1,D=!1;if(Ie(e)?(h=()=>e.value,M=Ve(e)):Qt(e)?(h=()=>d(e),M=!0):Y(e)?(D=!0,M=e.some(E=>Qt(E)||Ve(E)),h=()=>e.map(E=>{if(Ie(E))return E.value;if(Qt(E))return d(E);if(B(E))return a?a(E,2):E()})):B(e)?t?h=a?()=>a(e,2):e:h=()=>{if(b){At();try{b()}finally{Pt()}}const E=Wt;Wt=_;try{return a?a(e,3,[I]):e(I)}finally{Wt=E}}:h=Xe,t&&l){const E=h,S=l===!0?1/0:l;h=()=>ht(E(),S)}const w=Ko(),F=()=>{_.stop(),w&&w.active&&Qr(w.effects,_)};if(s&&t){const E=t;t=(...S)=>{E(...S),F()}}let j=D?new Array(e.length).fill(wn):wn;const T=E=>{if(!(!(_.flags&1)||!_.dirty&&!E))if(t){const S=_.run();if(l||M||(D?S.some((y,k)=>Nt(y,j[k])):Nt(S,j))){b&&b();const y=Wt;Wt=_;try{const k=[S,j===wn?void 0:D&&j[0]===wn?[]:j,I];a?a(t,3,k):t(...k),j=S}finally{Wt=y}}}else _.run()};return o&&o(T),_=new ql(h),_.scheduler=i?()=>i(T,!1):T,I=E=>ha(E,!1,_),b=_.onStop=()=>{const E=Kn.get(_);if(E){if(a)a(E,4);else for(const S of E)S();Kn.delete(_)}},t?r?T(!0):j=_.run():i?i(T.bind(null,!0),!0):_.run(),F.pause=_.pause.bind(_),F.resume=_.resume.bind(_),F.stop=F,F}function ht(e,t=1/0,n){if(t<=0||!oe(e)||e.__v_skip||(n=n||new Set,n.has(e)))return e;if(n.add(e),t--,Ie(e))ht(e.value,t,n);else if(Y(e))for(let r=0;r<e.length;r++)ht(e[r],t,n);else if(tr(e)||qt(e))e.forEach(r=>{ht(r,t,n)});else if(Vl(e)){for(const r in e)ht(e[r],t,n);for(const r of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,r)&&ht(e[r],t,n)}return e}/**
* @vue/runtime-core v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Rn(e,t,n,r){try{return r?e(...r):e()}catch(l){ir(l,t,n)}}function st(e,t,n,r){if(B(e)){const l=Rn(e,t,n,r);return l&&Wl(l)&&l.catch(s=>{ir(s,t,n)}),l}if(Y(e)){const l=[];for(let s=0;s<e.length;s++)l.push(st(e[s],t,n,r));return l}}function ir(e,t,n,r=!0){const l=t?t.vnode:null,{errorHandler:s,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||re;if(t){let o=t.parent;const a=t.proxy,d=`https://vuejs.org/error-reference/#runtime-${n}`;for(;o;){const _=o.ec;if(_){for(let h=0;h<_.length;h++)if(_[h](e,a,d)===!1)return}o=o.parent}if(s){At(),Rn(s,null,10,[e,a,d]),Pt();return}}ga(e,n,l,r,i)}function ga(e,t,n,r=!0,l=!1){if(l)throw e;console.error(e)}const Pe=[];let ze=-1;const Zt=[];let Lt=null,Gt=0;const mi=Promise.resolve();let Yn=null;function hi(e){const t=Yn||mi;return e?t.then(this?e.bind(this):e):t}function ba(e){let t=ze+1,n=Pe.length;for(;t<n;){const r=t+n>>>1,l=Pe[r],s=In(l);s<e||s===e&&l.flags&2?t=r+1:n=r}return t}function cs(e){if(!(e.flags&1)){const t=In(e),n=Pe[Pe.length-1];!n||!(e.flags&2)&&t>=In(n)?Pe.push(e):Pe.splice(ba(t),0,e),e.flags|=1,pi()}}function pi(){Yn||(Yn=mi.then(bi))}function Ea(e){Y(e)?Zt.push(...e):Lt&&e.id===-1?Lt.splice(Gt+1,0,e):e.flags&1||(Zt.push(e),e.flags|=1),pi()}function Ps(e,t,n=ze+1){for(;n<Pe.length;n++){const r=Pe[n];if(r&&r.flags&2){if(e&&r.id!==e.uid)continue;Pe.splice(n,1),n--,r.flags&4&&(r.flags&=-2),r(),r.flags&4||(r.flags&=-2)}}}function gi(e){if(Zt.length){const t=[...new Set(Zt)].sort((n,r)=>In(n)-In(r));if(Zt.length=0,Lt){Lt.push(...t);return}for(Lt=t,Gt=0;Gt<Lt.length;Gt++){const n=Lt[Gt];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}Lt=null,Gt=0}}const In=e=>e.id==null?e.flags&2?-1:1/0:e.id;function bi(e){const t=Xe;try{for(ze=0;ze<Pe.length;ze++){const n=Pe[ze];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),Rn(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;ze<Pe.length;ze++){const n=Pe[ze];n&&(n.flags&=-2)}ze=-1,Pe.length=0,gi(),Yn=null,(Pe.length||Zt.length)&&bi()}}let Ue=null,Ei=null;function Gn(e){const t=Ue;return Ue=e,Ei=e&&e.type.__scopeId||null,t}function va(e,t=Ue,n){if(!t||e._n)return e;const r=(...l)=>{r._d&&Ws(-1);const s=Gn(t);let i;try{i=e(...l)}finally{Gn(s),r._d&&Ws(1)}return i};return r._n=!0,r._c=!0,r._d=!0,r}function Rs(e,t){if(Ue===null)return e;const n=cr(Ue),r=e.dirs||(e.dirs=[]);for(let l=0;l<t.length;l++){let[s,i,o,a=re]=t[l];s&&(B(s)&&(s={mounted:s,updated:s}),s.deep&&ht(i),r.push({dir:s,instance:n,value:i,oldValue:void 0,arg:o,modifiers:a}))}return e}function kt(e,t,n,r){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const o=l[i];s&&(o.oldValue=s[i].value);let a=o.dir[r];a&&(At(),st(a,n,8,[e.el,o,e,t]),Pt())}}const Ta=Symbol("_vte"),Ia=e=>e.__isTeleport;function us(e,t){e.shapeFlag&6&&e.component?(e.transition=t,us(e.component.subTree,t)):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}/*! #__NO_SIDE_EFFECTS__ */function fs(e,t){return B(e)?(()=>Te({name:e.name},t,{setup:e}))():e}function vi(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}function Bn(e,t,n,r,l=!1){if(Y(e)){e.forEach((M,D)=>Bn(M,t&&(Y(t)?t[D]:t),n,r,l));return}if(pn(r)&&!l){r.shapeFlag&512&&r.type.__asyncResolved&&r.component.subTree.component&&Bn(e,t,n,r.component.subTree);return}const s=r.shapeFlag&4?cr(r.component):r.el,i=l?null:s,{i:o,r:a}=e,d=t&&t.r,_=o.refs===re?o.refs={}:o.refs,h=o.setupState,b=Z(h),I=h===re?()=>!1:M=>z(b,M);if(d!=null&&d!==a&&(me(d)?(_[d]=null,I(d)&&(h[d]=null)):Ie(d)&&(d.value=null)),B(a))Rn(a,o,12,[i,_]);else{const M=me(a),D=Ie(a);if(M||D){const w=()=>{if(e.f){const F=M?I(a)?h[a]:_[a]:a.value;l?Y(F)&&Qr(F,s):Y(F)?F.includes(s)||F.push(s):M?(_[a]=[s],I(a)&&(h[a]=_[a])):(a.value=[s],e.k&&(_[e.k]=a.value))}else M?(_[a]=i,I(a)&&(h[a]=i)):D&&(a.value=i,e.k&&(_[e.k]=i))};i?(w.id=-1,we(w,n)):w()}}}rr().requestIdleCallback;rr().cancelIdleCallback;const pn=e=>!!e.type.__asyncLoader,Ti=e=>e.type.__isKeepAlive;function La(e,t){Ii(e,"a",t)}function ya(e,t){Ii(e,"da",t)}function Ii(e,t,n=Ne){const r=e.__wdc||(e.__wdc=()=>{let l=n;for(;l;){if(l.isDeactivated)return;l=l.parent}return e()});if(or(t,r,n),n){let l=n.parent;for(;l&&l.parent;)Ti(l.parent.vnode)&&Oa(r,t,n,l),l=l.parent}}function Oa(e,t,n,r){const l=or(t,e,r,!0);_s(()=>{Qr(r[t],l)},n)}function or(e,t,n=Ne,r=!1){if(n){const l=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...i)=>{At();const o=Dn(n),a=st(t,n,e,i);return o(),Pt(),a});return r?l.unshift(s):l.push(s),s}}const gt=e=>(t,n=Ne)=>{(!Nn||e==="sp")&&or(e,(...r)=>t(...r),n)},Li=gt("bm"),ds=gt("m"),Na=gt("bu"),Sa=gt("u"),Ca=gt("bum"),_s=gt("um"),Aa=gt("sp"),Pa=gt("rtg"),Ra=gt("rtc");function Ma(e,t=Ne){or("ec",e,t)}const Da=Symbol.for("v-ndc");function Ms(e,t,n,r){let l;const s=n&&n[r],i=Y(e);if(i||me(e)){const o=i&&Qt(e);let a=!1;o&&(a=!Ve(e),e=lr(e)),l=new Array(e.length);for(let d=0,_=e.length;d<_;d++)l[d]=t(a?Oe(e[d]):e[d],d,void 0,s&&s[d])}else if(typeof e=="number"){l=new Array(e);for(let o=0;o<e;o++)l[o]=t(o+1,o,void 0,s&&s[o])}else if(oe(e))if(e[Symbol.iterator])l=Array.from(e,(o,a)=>t(o,a,void 0,s&&s[a]));else{const o=Object.keys(e);l=new Array(o.length);for(let a=0,d=o.length;a<d;a++){const _=o[a];l[a]=t(e[_],_,a,s&&s[a])}}else l=[];return n&&(n[r]=l),l}const Fr=e=>e?Vi(e)?cr(e):Fr(e.parent):null,gn=Te(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Fr(e.parent),$root:e=>Fr(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>ms(e),$forceUpdate:e=>e.f||(e.f=()=>{cs(e.update)}),$nextTick:e=>e.n||(e.n=hi.bind(e.proxy)),$watch:e=>tc.bind(e)}),vr=(e,t)=>e!==re&&!e.__isScriptSetup&&z(e,t),Fa={get({_:e},t){if(t==="__v_skip")return!0;const{ctx:n,setupState:r,data:l,props:s,accessCache:i,type:o,appContext:a}=e;let d;if(t[0]!=="$"){const I=i[t];if(I!==void 0)switch(I){case 1:return r[t];case 2:return l[t];case 4:return n[t];case 3:return s[t]}else{if(vr(r,t))return i[t]=1,r[t];if(l!==re&&z(l,t))return i[t]=2,l[t];if((d=e.propsOptions[0])&&z(d,t))return i[t]=3,s[t];if(n!==re&&z(n,t))return i[t]=4,n[t];kr&&(i[t]=0)}}const _=gn[t];let h,b;if(_)return t==="$attrs"&&ye(e.attrs,"get",""),_(e);if((h=o.__cssModules)&&(h=h[t]))return h;if(n!==re&&z(n,t))return i[t]=4,n[t];if(b=a.config.globalProperties,z(b,t))return b[t]},set({_:e},t,n){const{data:r,setupState:l,ctx:s}=e;return vr(l,t)?(l[t]=n,!0):r!==re&&z(r,t)?(r[t]=n,!0):z(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(s[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:l,propsOptions:s}},i){let o;return!!n[i]||e!==re&&z(e,i)||vr(t,i)||(o=s[0])&&z(o,i)||z(r,i)||z(gn,i)||z(l.config.globalProperties,i)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:z(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};function Ds(e){return Y(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}let kr=!0;function ka(e){const t=ms(e),n=e.proxy,r=e.ctx;kr=!1,t.beforeCreate&&Fs(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:o,provide:a,inject:d,created:_,beforeMount:h,mounted:b,beforeUpdate:I,updated:M,activated:D,deactivated:w,beforeDestroy:F,beforeUnmount:j,destroyed:T,unmounted:E,render:S,renderTracked:y,renderTriggered:k,errorCaptured:W,serverPrefetch:U,expose:te,inheritAttrs:he,components:X,directives:ue,filters:lt}=t;if(d&&wa(d,r,null),i)for(const ee in i){const q=i[ee];B(q)&&(r[ee]=q.bind(n))}if(l){const ee=l.call(n,n);oe(ee)&&(e.data=is(ee))}if(kr=!0,s)for(const ee in s){const q=s[ee],De=B(q)?q.bind(n,n):B(q.get)?q.get.bind(n,n):Xe,qe=!B(q)&&B(q.set)?q.set.bind(n):Xe,pe=Ye({get:De,set:qe});Object.defineProperty(r,ee,{enumerable:!0,configurable:!0,get:()=>pe.value,set:be=>pe.value=be})}if(o)for(const ee in o)yi(o[ee],r,n,ee);if(a){const ee=B(a)?a.call(n):a;Reflect.ownKeys(ee).forEach(q=>{Va(q,ee[q])})}_&&Fs(_,e,"c");function se(ee,q){Y(q)?q.forEach(De=>ee(De.bind(n))):q&&ee(q.bind(n))}if(se(Li,h),se(ds,b),se(Na,I),se(Sa,M),se(La,D),se(ya,w),se(Ma,W),se(Ra,y),se(Pa,k),se(Ca,j),se(_s,E),se(Aa,U),Y(te))if(te.length){const ee=e.exposed||(e.exposed={});te.forEach(q=>{Object.defineProperty(ee,q,{get:()=>n[q],set:De=>n[q]=De})})}else e.exposed||(e.exposed={});S&&e.render===Xe&&(e.render=S),he!=null&&(e.inheritAttrs=he),X&&(e.components=X),ue&&(e.directives=ue),U&&vi(e)}function wa(e,t,n=Xe){Y(e)&&(e=wr(e));for(const r in e){const l=e[r];let s;oe(l)?"default"in l?s=bn(l.from||r,l.default,!0):s=bn(l.from||r):s=bn(l),Ie(s)?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>s.value,set:i=>s.value=i}):t[r]=s}}function Fs(e,t,n){st(Y(e)?e.map(r=>r.bind(t.proxy)):e.bind(t.proxy),t,n)}function yi(e,t,n,r){let l=r.includes(".")?Ui(n,r):()=>n[r];if(me(e)){const s=t[e];B(s)&&en(l,s)}else if(B(e))en(l,e.bind(n));else if(oe(e))if(Y(e))e.forEach(s=>yi(s,t,n,r));else{const s=B(e.handler)?e.handler.bind(n):t[e.handler];B(s)&&en(l,s,e)}}function ms(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let a;return o?a=o:!l.length&&!n&&!r?a=t:(a={},l.length&&l.forEach(d=>Xn(a,d,i,!0)),Xn(a,t,i)),oe(t)&&s.set(t,a),a}function Xn(e,t,n,r=!1){const{mixins:l,extends:s}=t;s&&Xn(e,s,n,!0),l&&l.forEach(i=>Xn(e,i,n,!0));for(const i in t)if(!(r&&i==="expose")){const o=xa[i]||n&&n[i];e[i]=o?o(e[i],t[i]):t[i]}return e}const xa={data:ks,props:ws,emits:ws,methods:dn,computed:dn,beforeCreate:Ce,created:Ce,beforeMount:Ce,mounted:Ce,beforeUpdate:Ce,updated:Ce,beforeDestroy:Ce,beforeUnmount:Ce,destroyed:Ce,unmounted:Ce,activated:Ce,deactivated:Ce,errorCaptured:Ce,serverPrefetch:Ce,components:dn,directives:dn,watch:$a,provide:ks,inject:Ua};function ks(e,t){return t?e?function(){return Te(B(e)?e.call(this,this):e,B(t)?t.call(this,this):t)}:t:e}function Ua(e,t){return dn(wr(e),wr(t))}function wr(e){if(Y(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Ce(e,t){return e?[...new Set([].concat(e,t))]:t}function dn(e,t){return e?Te(Object.create(null),e,t):t}function ws(e,t){return e?Y(e)&&Y(t)?[...new Set([...e,...t])]:Te(Object.create(null),Ds(e),Ds(t??{})):t}function $a(e,t){if(!e)return t;if(!t)return e;const n=Te(Object.create(null),e);for(const r in t)n[r]=Ce(e[r],t[r]);return n}function Oi(){return{app:null,config:{isNativeTag:Po,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Wa=0;function ja(e,t){return function(r,l=null){B(r)||(r=Te({},r)),l!=null&&!oe(l)&&(l=null);const s=Oi(),i=new WeakSet,o=[];let a=!1;const d=s.app={_uid:Wa++,_component:r,_props:l,_container:null,_context:s,_instance:null,version:yc,get config(){return s.config},set config(_){},use(_,...h){return i.has(_)||(_&&B(_.install)?(i.add(_),_.install(d,...h)):B(_)&&(i.add(_),_(d,...h))),d},mixin(_){return s.mixins.includes(_)||s.mixins.push(_),d},component(_,h){return h?(s.components[_]=h,d):s.components[_]},directive(_,h){return h?(s.directives[_]=h,d):s.directives[_]},mount(_,h,b){if(!a){const I=d._ceVNode||We(r,l);return I.appContext=s,b===!0?b="svg":b===!1&&(b=void 0),h&&t?t(I,_):e(I,_,b),a=!0,d._container=_,_.__vue_app__=d,cr(I.component)}},onUnmount(_){o.push(_)},unmount(){a&&(st(o,d._instance,16),e(null,d._container),delete d._container.__vue_app__)},provide(_,h){return s.provides[_]=h,d},runWithContext(_){const h=zt;zt=d;try{return _()}finally{zt=h}}};return d}}let zt=null;function Va(e,t){if(Ne){let n=Ne.provides;const r=Ne.parent&&Ne.parent.provides;r===n&&(n=Ne.provides=Object.create(r)),n[e]=t}}function bn(e,t,n=!1){const r=Ne||Ue;if(r||zt){const l=zt?zt._context.provides:r?r.parent==null?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides:void 0;if(l&&e in l)return l[e];if(arguments.length>1)return n&&B(t)?t.call(r&&r.proxy):t}}const Ni={},Si=()=>Object.create(Ni),Ci=e=>Object.getPrototypeOf(e)===Ni;function Ha(e,t,n,r=!1){const l={},s=Si();e.propsDefaults=Object.create(null),Ai(e,t,l,s);for(const i in e.propsOptions[0])i in l||(l[i]=void 0);n?e.props=r?l:ca(l):e.type.props?e.props=l:e.props=s,e.attrs=s}function Ka(e,t,n,r){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,o=Z(l),[a]=e.propsOptions;let d=!1;if((r||i>0)&&!(i&16)){if(i&8){const _=e.vnode.dynamicProps;for(let h=0;h<_.length;h++){let b=_[h];if(ar(e.emitsOptions,b))continue;const I=t[b];if(a)if(z(s,b))I!==s[b]&&(s[b]=I,d=!0);else{const M=St(b);l[M]=xr(a,o,M,I,e,!1)}else I!==s[b]&&(s[b]=I,d=!0)}}}else{Ai(e,t,l,s)&&(d=!0);let _;for(const h in o)(!t||!z(t,h)&&((_=Ht(h))===h||!z(t,_)))&&(a?n&&(n[h]!==void 0||n[_]!==void 0)&&(l[h]=xr(a,o,h,void 0,e,!0)):delete l[h]);if(s!==o)for(const h in s)(!t||!z(t,h))&&(delete s[h],d=!0)}d&&mt(e.attrs,"set","")}function Ai(e,t,n,r){const[l,s]=e.propsOptions;let i=!1,o;if(t)for(let a in t){if(_n(a))continue;const d=t[a];let _;l&&z(l,_=St(a))?!s||!s.includes(_)?n[_]=d:(o||(o={}))[_]=d:ar(e.emitsOptions,a)||(!(a in r)||d!==r[a])&&(r[a]=d,i=!0)}if(s){const a=Z(n),d=o||re;for(let _=0;_<s.length;_++){const h=s[_];n[h]=xr(l,a,h,d[h],e,!z(d,h))}}return i}function xr(e,t,n,r,l,s){const i=e[n];if(i!=null){const o=z(i,"default");if(o&&r===void 0){const a=i.default;if(i.type!==Function&&!i.skipFactory&&B(a)){const{propsDefaults:d}=l;if(n in d)r=d[n];else{const _=Dn(l);r=d[n]=a.call(null,t),_()}}else r=a;l.ce&&l.ce._setProp(n,r)}i[0]&&(s&&!o?r=!1:i[1]&&(r===""||r===Ht(n))&&(r=!0))}return r}const Ya=new WeakMap;function Pi(e,t,n=!1){const r=n?Ya:t.propsCache,l=r.get(e);if(l)return l;const s=e.props,i={},o=[];let a=!1;if(!B(e)){const _=h=>{a=!0;const[b,I]=Pi(h,t,!0);Te(i,b),I&&o.push(...I)};!n&&t.mixins.length&&t.mixins.forEach(_),e.extends&&_(e.extends),e.mixins&&e.mixins.forEach(_)}if(!s&&!a)return oe(e)&&r.set(e,Jt),Jt;if(Y(s))for(let _=0;_<s.length;_++){const h=St(s[_]);xs(h)&&(i[h]=re)}else if(s)for(const _ in s){const h=St(_);if(xs(h)){const b=s[_],I=i[h]=Y(b)||B(b)?{type:b}:Te({},b),M=I.type;let D=!1,w=!0;if(Y(M))for(let F=0;F<M.length;++F){const j=M[F],T=B(j)&&j.name;if(T==="Boolean"){D=!0;break}else T==="String"&&(w=!1)}else D=B(M)&&M.name==="Boolean";I[0]=D,I[1]=w,(D||z(I,"default"))&&o.push(h)}}const d=[i,o];return oe(e)&&r.set(e,d),d}function xs(e){return e[0]!=="$"&&!_n(e)}const Ri=e=>e[0]==="_"||e==="$stable",hs=e=>Y(e)?e.map(et):[et(e)],Ga=(e,t,n)=>{if(t._n)return t;const r=va((...l)=>hs(t(...l)),n);return r._c=!1,r},Mi=(e,t,n)=>{const r=e._ctx;for(const l in e){if(Ri(l))continue;const s=e[l];if(B(s))t[l]=Ga(l,s,r);else if(s!=null){const i=hs(s);t[l]=()=>i}}},Di=(e,t)=>{const n=hs(t);e.slots.default=()=>n},Fi=(e,t,n)=>{for(const r in t)(n||r!=="_")&&(e[r]=t[r])},Ba=(e,t,n)=>{const r=e.slots=Si();if(e.vnode.shapeFlag&32){const l=t._;l?(Fi(r,t,n),n&&Kl(r,"_",l,!0)):Mi(t,r)}else t&&Di(e,t)},Xa=(e,t,n)=>{const{vnode:r,slots:l}=e;let s=!0,i=re;if(r.shapeFlag&32){const o=t._;o?n&&o===1?s=!1:Fi(l,t,n):(s=!t.$stable,Mi(t,l)),i=t}else t&&(Di(e,t),i={default:1});if(s)for(const o in l)!Ri(o)&&i[o]==null&&delete l[o]},we=ac;function Ja(e){return qa(e)}function qa(e,t){const n=rr();n.__VUE__=!0;const{insert:r,remove:l,patchProp:s,createElement:i,createText:o,createComment:a,setText:d,setElementText:_,parentNode:h,nextSibling:b,setScopeId:I=Xe,insertStaticContent:M}=e,D=(m,f,v,P=null,O=null,C=null,x=void 0,c=null,u=!!f.dynamicChildren)=>{if(m===f)return;m&&!cn(m,f)&&(P=it(m),be(m,O,C,!0),m=null),f.patchFlag===-2&&(u=!1,f.dynamicChildren=null);const{type:p,ref:N,shapeFlag:R}=f;switch(p){case Mn:w(m,f,v,P);break;case Ln:F(m,f,v,P);break;case Wn:m==null&&j(f,v,P,x);break;case Me:X(m,f,v,P,O,C,x,c,u);break;default:R&1?S(m,f,v,P,O,C,x,c,u):R&6?ue(m,f,v,P,O,C,x,c,u):(R&64||R&128)&&p.process(m,f,v,P,O,C,x,c,u,Fe)}N!=null&&O&&Bn(N,m&&m.ref,C,f||m,!f)},w=(m,f,v,P)=>{if(m==null)r(f.el=o(f.children),v,P);else{const O=f.el=m.el;f.children!==m.children&&d(O,f.children)}},F=(m,f,v,P)=>{m==null?r(f.el=a(f.children||""),v,P):f.el=m.el},j=(m,f,v,P)=>{[m.el,m.anchor]=M(m.children,f,v,P,m.el,m.anchor)},T=({el:m,anchor:f},v,P)=>{let O;for(;m&&m!==f;)O=b(m),r(m,v,P),m=O;r(f,v,P)},E=({el:m,anchor:f})=>{let v;for(;m&&m!==f;)v=b(m),l(m),m=v;l(f)},S=(m,f,v,P,O,C,x,c,u)=>{f.type==="svg"?x="svg":f.type==="math"&&(x="mathml"),m==null?y(f,v,P,O,C,x,c,u):U(m,f,O,C,x,c,u)},y=(m,f,v,P,O,C,x,c)=>{let u,p;const{props:N,shapeFlag:R,transition:A,dirs:g}=m;if(u=m.el=i(m.type,C,N&&N.is,N),R&8?_(u,m.children):R&16&&W(m.children,u,null,P,O,Tr(m,C),x,c),g&&kt(m,null,P,"created"),k(u,m,m.scopeId,x,P),N){for(const V in N)V!=="value"&&!_n(V)&&s(u,V,null,N[V],C,P);"value"in N&&s(u,"value",null,N.value,C),(p=N.onVnodeBeforeMount)&&Ze(p,P,m)}g&&kt(m,null,P,"beforeMount");const L=Qa(O,A);L&&A.beforeEnter(u),r(u,f,v),((p=N&&N.onVnodeMounted)||L||g)&&we(()=>{p&&Ze(p,P,m),L&&A.enter(u),g&&kt(m,null,P,"mounted")},O)},k=(m,f,v,P,O)=>{if(v&&I(m,v),P)for(let C=0;C<P.length;C++)I(m,P[C]);if(O){let C=O.subTree;if(f===C||Wi(C.type)&&(C.ssContent===f||C.ssFallback===f)){const x=O.vnode;k(m,x,x.scopeId,x.slotScopeIds,O.parent)}}},W=(m,f,v,P,O,C,x,c,u=0)=>{for(let p=u;p<m.length;p++){const N=m[p]=c?yt(m[p]):et(m[p]);D(null,N,f,v,P,O,C,x,c)}},U=(m,f,v,P,O,C,x)=>{const c=f.el=m.el;let{patchFlag:u,dynamicChildren:p,dirs:N}=f;u|=m.patchFlag&16;const R=m.props||re,A=f.props||re;let g;if(v&&wt(v,!1),(g=A.onVnodeBeforeUpdate)&&Ze(g,v,f,m),N&&kt(f,m,v,"beforeUpdate"),v&&wt(v,!0),(R.innerHTML&&A.innerHTML==null||R.textContent&&A.textContent==null)&&_(c,""),p?te(m.dynamicChildren,p,c,v,P,Tr(f,O),C):x||q(m,f,c,null,v,P,Tr(f,O),C,!1),u>0){if(u&16)he(c,R,A,v,O);else if(u&2&&R.class!==A.class&&s(c,"class",null,A.class,O),u&4&&s(c,"style",R.style,A.style,O),u&8){const L=f.dynamicProps;for(let V=0;V<L.length;V++){const H=L[V],ce=R[H],fe=A[H];(fe!==ce||H==="value")&&s(c,H,ce,fe,O,v)}}u&1&&m.children!==f.children&&_(c,f.children)}else!x&&p==null&&he(c,R,A,v,O);((g=A.onVnodeUpdated)||N)&&we(()=>{g&&Ze(g,v,f,m),N&&kt(f,m,v,"updated")},P)},te=(m,f,v,P,O,C,x)=>{for(let c=0;c<f.length;c++){const u=m[c],p=f[c],N=u.el&&(u.type===Me||!cn(u,p)||u.shapeFlag&70)?h(u.el):v;D(u,p,N,null,P,O,C,x,!0)}},he=(m,f,v,P,O)=>{if(f!==v){if(f!==re)for(const C in f)!_n(C)&&!(C in v)&&s(m,C,f[C],null,O,P);for(const C in v){if(_n(C))continue;const x=v[C],c=f[C];x!==c&&C!=="value"&&s(m,C,c,x,O,P)}"value"in v&&s(m,"value",f.value,v.value,O)}},X=(m,f,v,P,O,C,x,c,u)=>{const p=f.el=m?m.el:o(""),N=f.anchor=m?m.anchor:o("");let{patchFlag:R,dynamicChildren:A,slotScopeIds:g}=f;g&&(c=c?c.concat(g):g),m==null?(r(p,v,P),r(N,v,P),W(f.children||[],v,N,O,C,x,c,u)):R>0&&R&64&&A&&m.dynamicChildren?(te(m.dynamicChildren,A,v,O,C,x,c),(f.key!=null||O&&f===O.subTree)&&ki(m,f,!0)):q(m,f,v,N,O,C,x,c,u)},ue=(m,f,v,P,O,C,x,c,u)=>{f.slotScopeIds=c,m==null?f.shapeFlag&512?O.ctx.activate(f,v,P,x,u):lt(f,v,P,O,C,x,u):bt(m,f,u)},lt=(m,f,v,P,O,C,x)=>{const c=m.component=bc(m,P,O);if(Ti(m)&&(c.ctx.renderer=Fe),Ec(c,!1,x),c.asyncDep){if(O&&O.registerDep(c,se,x),!m.el){const u=c.subTree=We(Ln);F(null,u,f,v)}}else se(c,m,f,v,O,C,x)},bt=(m,f,v)=>{const P=f.component=m.component;if(ic(m,f,v))if(P.asyncDep&&!P.asyncResolved){ee(P,f,v);return}else P.next=f,P.update();else f.el=m.el,P.vnode=f},se=(m,f,v,P,O,C,x)=>{const c=()=>{if(m.isMounted){let{next:R,bu:A,u:g,parent:L,vnode:V}=m;{const Se=wi(m);if(Se){R&&(R.el=V.el,ee(m,R,x)),Se.asyncDep.then(()=>{m.isUnmounted||c()});return}}let H=R,ce;wt(m,!1),R?(R.el=V.el,ee(m,R,x)):R=V,A&&$n(A),(ce=R.props&&R.props.onVnodeBeforeUpdate)&&Ze(ce,L,R,V),wt(m,!0);const fe=Ir(m),Ee=m.subTree;m.subTree=fe,D(Ee,fe,h(Ee.el),it(Ee),m,O,C),R.el=fe.el,H===null&&oc(m,fe.el),g&&we(g,O),(ce=R.props&&R.props.onVnodeUpdated)&&we(()=>Ze(ce,L,R,V),O)}else{let R;const{el:A,props:g}=f,{bm:L,m:V,parent:H,root:ce,type:fe}=m,Ee=pn(f);if(wt(m,!1),L&&$n(L),!Ee&&(R=g&&g.onVnodeBeforeMount)&&Ze(R,H,f),wt(m,!0),A&&ct){const Se=()=>{m.subTree=Ir(m),ct(A,m.subTree,m,O,null)};Ee&&fe.__asyncHydrate?fe.__asyncHydrate(A,m,Se):Se()}else{ce.ce&&ce.ce._injectChildStyle(fe);const Se=m.subTree=Ir(m);D(null,Se,v,P,m,O,C),f.el=Se.el}if(V&&we(V,O),!Ee&&(R=g&&g.onVnodeMounted)){const Se=f;we(()=>Ze(R,H,Se),O)}(f.shapeFlag&256||H&&pn(H.vnode)&&H.vnode.shapeFlag&256)&&m.a&&we(m.a,O),m.isMounted=!0,f=v=P=null}};m.scope.on();const u=m.effect=new ql(c);m.scope.off();const p=m.update=u.run.bind(u),N=m.job=u.runIfDirty.bind(u);N.i=m,N.id=m.uid,u.scheduler=()=>cs(N),wt(m,!0),p()},ee=(m,f,v)=>{f.component=m;const P=m.vnode.props;m.vnode=f,m.next=null,Ka(m,f.props,P,v),Xa(m,f.children,v),At(),Ps(m),Pt()},q=(m,f,v,P,O,C,x,c,u=!1)=>{const p=m&&m.children,N=m?m.shapeFlag:0,R=f.children,{patchFlag:A,shapeFlag:g}=f;if(A>0){if(A&128){qe(p,R,v,P,O,C,x,c,u);return}else if(A&256){De(p,R,v,P,O,C,x,c,u);return}}g&8?(N&16&&He(p,O,C),R!==p&&_(v,R)):N&16?g&16?qe(p,R,v,P,O,C,x,c,u):He(p,O,C,!0):(N&8&&_(v,""),g&16&&W(R,v,P,O,C,x,c,u))},De=(m,f,v,P,O,C,x,c,u)=>{m=m||Jt,f=f||Jt;const p=m.length,N=f.length,R=Math.min(p,N);let A;for(A=0;A<R;A++){const g=f[A]=u?yt(f[A]):et(f[A]);D(m[A],g,v,null,O,C,x,c,u)}p>N?He(m,O,C,!0,!1,R):W(f,v,P,O,C,x,c,u,R)},qe=(m,f,v,P,O,C,x,c,u)=>{let p=0;const N=f.length;let R=m.length-1,A=N-1;for(;p<=R&&p<=A;){const g=m[p],L=f[p]=u?yt(f[p]):et(f[p]);if(cn(g,L))D(g,L,v,null,O,C,x,c,u);else break;p++}for(;p<=R&&p<=A;){const g=m[R],L=f[A]=u?yt(f[A]):et(f[A]);if(cn(g,L))D(g,L,v,null,O,C,x,c,u);else break;R--,A--}if(p>R){if(p<=A){const g=A+1,L=g<N?f[g].el:P;for(;p<=A;)D(null,f[p]=u?yt(f[p]):et(f[p]),v,L,O,C,x,c,u),p++}}else if(p>A)for(;p<=R;)be(m[p],O,C,!0),p++;else{const g=p,L=p,V=new Map;for(p=L;p<=A;p++){const ke=f[p]=u?yt(f[p]):et(f[p]);ke.key!=null&&V.set(ke.key,p)}let H,ce=0;const fe=A-L+1;let Ee=!1,Se=0;const Kt=new Array(fe);for(p=0;p<fe;p++)Kt[p]=0;for(p=g;p<=R;p++){const ke=m[p];if(ce>=fe){be(ke,O,C,!0);continue}let Qe;if(ke.key!=null)Qe=V.get(ke.key);else for(H=L;H<=A;H++)if(Kt[H-L]===0&&cn(ke,f[H])){Qe=H;break}Qe===void 0?be(ke,O,C,!0):(Kt[Qe-L]=p+1,Qe>=Se?Se=Qe:Ee=!0,D(ke,f[Qe],v,null,O,C,x,c,u),ce++)}const ys=Ee?Za(Kt):Jt;for(H=ys.length-1,p=fe-1;p>=0;p--){const ke=L+p,Qe=f[ke],Os=ke+1<N?f[ke+1].el:P;Kt[p]===0?D(null,Qe,v,Os,O,C,x,c,u):Ee&&(H<0||p!==ys[H]?pe(Qe,v,Os,2):H--)}}},pe=(m,f,v,P,O=null)=>{const{el:C,type:x,transition:c,children:u,shapeFlag:p}=m;if(p&6){pe(m.component.subTree,f,v,P);return}if(p&128){m.suspense.move(f,v,P);return}if(p&64){x.move(m,f,v,Fe);return}if(x===Me){r(C,f,v);for(let R=0;R<u.length;R++)pe(u[R],f,v,P);r(m.anchor,f,v);return}if(x===Wn){T(m,f,v);return}if(P!==2&&p&1&&c)if(P===0)c.beforeEnter(C),r(C,f,v),we(()=>c.enter(C),O);else{const{leave:R,delayLeave:A,afterLeave:g}=c,L=()=>r(C,f,v),V=()=>{R(C,()=>{L(),g&&g()})};A?A(C,L,V):V()}else r(C,f,v)},be=(m,f,v,P=!1,O=!1)=>{const{type:C,props:x,ref:c,children:u,dynamicChildren:p,shapeFlag:N,patchFlag:R,dirs:A,cacheIndex:g}=m;if(R===-2&&(O=!1),c!=null&&Bn(c,null,v,m,!0),g!=null&&(f.renderCache[g]=void 0),N&256){f.ctx.deactivate(m);return}const L=N&1&&A,V=!pn(m);let H;if(V&&(H=x&&x.onVnodeBeforeUnmount)&&Ze(H,f,m),N&6)Ft(m.component,v,P);else{if(N&128){m.suspense.unmount(v,P);return}L&&kt(m,null,f,"beforeUnmount"),N&64?m.type.remove(m,f,v,Fe,P):p&&!p.hasOnce&&(C!==Me||R>0&&R&64)?He(p,f,v,!1,!0):(C===Me&&R&384||!O&&N&16)&&He(u,f,v),P&&Et(m)}(V&&(H=x&&x.onVnodeUnmounted)||L)&&we(()=>{H&&Ze(H,f,m),L&&kt(m,null,f,"unmounted")},v)},Et=m=>{const{type:f,el:v,anchor:P,transition:O}=m;if(f===Me){vt(v,P);return}if(f===Wn){E(m);return}const C=()=>{l(v),O&&!O.persisted&&O.afterLeave&&O.afterLeave()};if(m.shapeFlag&1&&O&&!O.persisted){const{leave:x,delayLeave:c}=O,u=()=>x(v,C);c?c(m.el,C,u):u()}else C()},vt=(m,f)=>{let v;for(;m!==f;)v=b(m),l(m),m=v;l(f)},Ft=(m,f,v)=>{const{bum:P,scope:O,job:C,subTree:x,um:c,m:u,a:p}=m;Us(u),Us(p),P&&$n(P),O.stop(),C&&(C.flags|=8,be(x,m,f,v)),c&&we(c,f),we(()=>{m.isUnmounted=!0},f),f&&f.pendingBranch&&!f.isUnmounted&&m.asyncDep&&!m.asyncResolved&&m.suspenseId===f.pendingId&&(f.deps--,f.deps===0&&f.resolve())},He=(m,f,v,P=!1,O=!1,C=0)=>{for(let x=C;x<m.length;x++)be(m[x],f,v,P,O)},it=m=>{if(m.shapeFlag&6)return it(m.component.subTree);if(m.shapeFlag&128)return m.suspense.next();const f=b(m.anchor||m.el),v=f&&f[Ta];return v?b(v):f};let ot=!1;const Tt=(m,f,v)=>{m==null?f._vnode&&be(f._vnode,null,null,!0):D(f._vnode||null,m,f,null,null,null,v),f._vnode=m,ot||(ot=!0,Ps(),gi(),ot=!1)},Fe={p:D,um:be,m:pe,r:Et,mt:lt,mc:W,pc:q,pbc:te,n:it,o:e};let at,ct;return t&&([at,ct]=t(Fe)),{render:Tt,hydrate:at,createApp:ja(Tt,at)}}function Tr({type:e,props:t},n){return n==="svg"&&e==="foreignObject"||n==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function wt({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function Qa(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function ki(e,t,n=!1){const r=e.children,l=t.children;if(Y(r)&&Y(l))for(let s=0;s<r.length;s++){const i=r[s];let o=l[s];o.shapeFlag&1&&!o.dynamicChildren&&((o.patchFlag<=0||o.patchFlag===32)&&(o=l[s]=yt(l[s]),o.el=i.el),!n&&o.patchFlag!==-2&&ki(i,o)),o.type===Mn&&(o.el=i.el)}}function Za(e){const t=e.slice(),n=[0];let r,l,s,i,o;const a=e.length;for(r=0;r<a;r++){const d=e[r];if(d!==0){if(l=n[n.length-1],e[l]<d){t[r]=l,n.push(r);continue}for(s=0,i=n.length-1;s<i;)o=s+i>>1,e[n[o]]<d?s=o+1:i=o;d<e[n[s]]&&(s>0&&(t[r]=n[s-1]),n[s]=r)}}for(s=n.length,i=n[s-1];s-- >0;)n[s]=i,i=t[i];return n}function wi(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:wi(t)}function Us(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const za=Symbol.for("v-scx"),ec=()=>bn(za);function en(e,t,n){return xi(e,t,n)}function xi(e,t,n=re){const{immediate:r,deep:l,flush:s,once:i}=n,o=Te({},n),a=t&&r||!t&&s!=="post";let d;if(Nn){if(s==="sync"){const I=ec();d=I.__watcherHandles||(I.__watcherHandles=[])}else if(!a){const I=()=>{};return I.stop=Xe,I.resume=Xe,I.pause=Xe,I}}const _=Ne;o.call=(I,M,D)=>st(I,_,M,D);let h=!1;s==="post"?o.scheduler=I=>{we(I,_&&_.suspense)}:s!=="sync"&&(h=!0,o.scheduler=(I,M)=>{M?I():cs(I)}),o.augmentJob=I=>{t&&(I.flags|=4),h&&(I.flags|=2,_&&(I.id=_.uid,I.i=_))};const b=pa(e,t,o);return Nn&&(d?d.push(b):a&&b()),b}function tc(e,t,n){const r=this.proxy,l=me(e)?e.includes(".")?Ui(r,e):()=>r[e]:e.bind(r,r);let s;B(t)?s=t:(s=t.handler,n=t);const i=Dn(this),o=xi(l,s.bind(r),n);return i(),o}function Ui(e,t){const n=t.split(".");return()=>{let r=e;for(let l=0;l<n.length&&r;l++)r=r[n[l]];return r}}const nc=(e,t)=>t==="modelValue"||t==="model-value"?e.modelModifiers:e[`${t}Modifiers`]||e[`${St(t)}Modifiers`]||e[`${Ht(t)}Modifiers`];function rc(e,t,...n){if(e.isUnmounted)return;const r=e.vnode.props||re;let l=n;const s=t.startsWith("update:"),i=s&&nc(r,t.slice(7));i&&(i.trim&&(l=n.map(_=>me(_)?_.trim():_)),i.number&&(l=n.map(Yl)));let o,a=r[o=hr(t)]||r[o=hr(St(t))];!a&&s&&(a=r[o=hr(Ht(t))]),a&&st(a,e,6,l);const d=r[o+"Once"];if(d){if(!e.emitted)e.emitted={};else if(e.emitted[o])return;e.emitted[o]=!0,st(d,e,6,l)}}function $i(e,t,n=!1){const r=t.emitsCache,l=r.get(e);if(l!==void 0)return l;const s=e.emits;let i={},o=!1;if(!B(e)){const a=d=>{const _=$i(d,t,!0);_&&(o=!0,Te(i,_))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return!s&&!o?(oe(e)&&r.set(e,null),null):(Y(s)?s.forEach(a=>i[a]=null):Te(i,s),oe(e)&&r.set(e,i),i)}function ar(e,t){return!e||!er(t)?!1:(t=t.slice(2).replace(/Once$/,""),z(e,t[0].toLowerCase()+t.slice(1))||z(e,Ht(t))||z(e,t))}function Ir(e){const{type:t,vnode:n,proxy:r,withProxy:l,propsOptions:[s],slots:i,attrs:o,emit:a,render:d,renderCache:_,props:h,data:b,setupState:I,ctx:M,inheritAttrs:D}=e,w=Gn(e);let F,j;try{if(n.shapeFlag&4){const E=l||r,S=E;F=et(d.call(S,E,_,h,I,b,M)),j=o}else{const E=t;F=et(E.length>1?E(h,{attrs:o,slots:i,emit:a}):E(h,null)),j=t.props?o:sc(o)}}catch(E){En.length=0,ir(E,e,1),F=We(Ln)}let T=F;if(j&&D!==!1){const E=Object.keys(j),{shapeFlag:S}=T;E.length&&S&7&&(s&&E.some(qr)&&(j=lc(j,s)),T=tn(T,j,!1,!0))}return n.dirs&&(T=tn(T,null,!1,!0),T.dirs=T.dirs?T.dirs.concat(n.dirs):n.dirs),n.transition&&us(T,n.transition),F=T,Gn(w),F}const sc=e=>{let t;for(const n in e)(n==="class"||n==="style"||er(n))&&((t||(t={}))[n]=e[n]);return t},lc=(e,t)=>{const n={};for(const r in e)(!qr(r)||!(r.slice(9)in t))&&(n[r]=e[r]);return n};function ic(e,t,n){const{props:r,children:l,component:s}=e,{props:i,children:o,patchFlag:a}=t,d=s.emitsOptions;if(t.dirs||t.transition)return!0;if(n&&a>=0){if(a&1024)return!0;if(a&16)return r?$s(r,i,d):!!i;if(a&8){const _=t.dynamicProps;for(let h=0;h<_.length;h++){const b=_[h];if(i[b]!==r[b]&&!ar(d,b))return!0}}}else return(l||o)&&(!o||!o.$stable)?!0:r===i?!1:r?i?$s(r,i,d):!0:!!i;return!1}function $s(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let l=0;l<r.length;l++){const s=r[l];if(t[s]!==e[s]&&!ar(n,s))return!0}return!1}function oc({vnode:e,parent:t},n){for(;t;){const r=t.subTree;if(r.suspense&&r.suspense.activeBranch===e&&(r.el=e.el),r===e)(e=t.vnode).el=n,t=t.parent;else break}}const Wi=e=>e.__isSuspense;function ac(e,t){t&&t.pendingBranch?Y(e)?t.effects.push(...e):t.effects.push(e):Ea(e)}const Me=Symbol.for("v-fgt"),Mn=Symbol.for("v-txt"),Ln=Symbol.for("v-cmt"),Wn=Symbol.for("v-stc"),En=[];let $e=null;function on(e=!1){En.push($e=e?null:[])}function cc(){En.pop(),$e=En[En.length-1]||null}let yn=1;function Ws(e,t=!1){yn+=e,e<0&&$e&&t&&($e.hasOnce=!0)}function uc(e){return e.dynamicChildren=yn>0?$e||Jt:null,cc(),yn>0&&$e&&$e.push(e),e}function an(e,t,n,r,l,s){return uc(_e(e,t,n,r,l,s,!0))}function Jn(e){return e?e.__v_isVNode===!0:!1}function cn(e,t){return e.type===t.type&&e.key===t.key}const ji=({key:e})=>e??null,jn=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?me(e)||Ie(e)||B(e)?{i:Ue,r:e,k:t,f:!!n}:e:null);function _e(e,t=null,n=null,r=0,l=null,s=e===Me?0:1,i=!1,o=!1){const a={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&ji(t),ref:t&&jn(t),scopeId:Ei,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:r,dynamicProps:l,dynamicChildren:null,appContext:null,ctx:Ue};return o?(ps(a,n),s&128&&e.normalize(a)):n&&(a.shapeFlag|=me(n)?8:16),yn>0&&!i&&$e&&(a.patchFlag>0||s&6)&&a.patchFlag!==32&&$e.push(a),a}const We=fc;function fc(e,t=null,n=null,r=0,l=null,s=!1){if((!e||e===Da)&&(e=Ln),Jn(e)){const o=tn(e,t,!0);return n&&ps(o,n),yn>0&&!s&&$e&&(o.shapeFlag&6?$e[$e.indexOf(e)]=o:$e.push(o)),o.patchFlag=-2,o}if(Lc(e)&&(e=e.__vccOpts),t){t=dc(t);let{class:o,style:a}=t;o&&!me(o)&&(t.class=es(o)),oe(a)&&(as(a)&&!Y(a)&&(a=Te({},a)),t.style=zr(a))}const i=me(e)?1:Wi(e)?128:Ia(e)?64:oe(e)?4:B(e)?2:0;return _e(e,t,n,r,l,i,s,!0)}function dc(e){return e?as(e)||Ci(e)?Te({},e):e:null}function tn(e,t,n=!1,r=!1){const{props:l,ref:s,patchFlag:i,children:o,transition:a}=e,d=t?hc(l||{},t):l,_={__v_isVNode:!0,__v_skip:!0,type:e.type,props:d,key:d&&ji(d),ref:t&&t.ref?n&&s?Y(s)?s.concat(jn(t)):[s,jn(t)]:jn(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Me?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:a,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&tn(e.ssContent),ssFallback:e.ssFallback&&tn(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return a&&r&&us(_,a.clone(_)),_}function _c(e=" ",t=0){return We(Mn,null,e,t)}function mc(e,t){const n=We(Wn,null,e);return n.staticCount=t,n}function et(e){return e==null||typeof e=="boolean"?We(Ln):Y(e)?We(Me,null,e.slice()):Jn(e)?yt(e):We(Mn,null,String(e))}function yt(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:tn(e)}function ps(e,t){let n=0;const{shapeFlag:r}=e;if(t==null)t=null;else if(Y(t))n=16;else if(typeof t=="object")if(r&65){const l=t.default;l&&(l._c&&(l._d=!1),ps(e,l()),l._c&&(l._d=!0));return}else{n=32;const l=t._;!l&&!Ci(t)?t._ctx=Ue:l===3&&Ue&&(Ue.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else B(t)?(t={default:t,_ctx:Ue},n=32):(t=String(t),r&64?(n=16,t=[_c(t)]):n=8);e.children=t,e.shapeFlag|=n}function hc(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const l in r)if(l==="class")t.class!==r.class&&(t.class=es([t.class,r.class]));else if(l==="style")t.style=zr([t.style,r.style]);else if(er(l)){const s=t[l],i=r[l];i&&s!==i&&!(Y(s)&&s.includes(i))&&(t[l]=s?[].concat(s,i):i)}else l!==""&&(t[l]=r[l])}return t}function Ze(e,t,n,r=null){st(e,t,7,[n,r])}const pc=Oi();let gc=0;function bc(e,t,n){const r=e.type,l=(t?t.appContext:e.appContext)||pc,s={uid:gc++,vnode:e,type:r,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new Jl(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Pi(r,l),emitsOptions:$i(r,l),emit:null,emitted:null,propsDefaults:re,inheritAttrs:r.inheritAttrs,ctx:re,data:re,props:re,attrs:re,slots:re,refs:re,setupState:re,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=rc.bind(null,s),e.ce&&e.ce(s),s}let Ne=null;const On=()=>Ne||Ue;let qn,Ur;{const e=rr(),t=(n,r)=>{let l;return(l=e[n])||(l=e[n]=[]),l.push(r),s=>{l.length>1?l.forEach(i=>i(s)):l[0](s)}};qn=t("__VUE_INSTANCE_SETTERS__",n=>Ne=n),Ur=t("__VUE_SSR_SETTERS__",n=>Nn=n)}const Dn=e=>{const t=Ne;return qn(e),e.scope.on(),()=>{e.scope.off(),qn(t)}},js=()=>{Ne&&Ne.scope.off(),qn(null)};function Vi(e){return e.vnode.shapeFlag&4}let Nn=!1;function Ec(e,t=!1,n=!1){t&&Ur(t);const{props:r,children:l}=e.vnode,s=Vi(e);Ha(e,r,s,t),Ba(e,l,n);const i=s?vc(e,t):void 0;return t&&Ur(!1),i}function vc(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,Fa);const{setup:r}=n;if(r){At();const l=e.setupContext=r.length>1?Ic(e):null,s=Dn(e),i=Rn(r,e,0,[e.props,l]),o=Wl(i);if(Pt(),s(),(o||e.sp)&&!pn(e)&&vi(e),o){if(i.then(js,js),t)return i.then(a=>{Vs(e,a,t)}).catch(a=>{ir(a,e,0)});e.asyncDep=i}else Vs(e,i,t)}else Hi(e,t)}function Vs(e,t,n){B(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:oe(t)&&(e.setupState=_i(t)),Hi(e,n)}let Hs;function Hi(e,t,n){const r=e.type;if(!e.render){if(!t&&Hs&&!r.render){const l=r.template||ms(e).template;if(l){const{isCustomElement:s,compilerOptions:i}=e.appContext.config,{delimiters:o,compilerOptions:a}=r,d=Te(Te({isCustomElement:s,delimiters:o},i),a);r.render=Hs(l,d)}}e.render=r.render||Xe}{const l=Dn(e);At();try{ka(e)}finally{Pt(),l()}}}const Tc={get(e,t){return ye(e,"get",""),e[t]}};function Ic(e){const t=n=>{e.exposed=n||{}};return{attrs:new Proxy(e.attrs,Tc),slots:e.slots,emit:e.emit,expose:t}}function cr(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(_i(ua(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in gn)return gn[n](e)},has(t,n){return n in t||n in gn}})):e.proxy}function Lc(e){return B(e)&&"__vccOpts"in e}const Ye=(e,t)=>ma(e,t,Nn);function Ki(e,t,n){const r=arguments.length;return r===2?oe(t)&&!Y(t)?Jn(t)?We(e,null,[t]):We(e,t):We(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):r===3&&Jn(n)&&(n=[n]),We(e,t,n))}const yc="3.5.13";/**
* @vue/runtime-dom v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let $r;const Ks=typeof window<"u"&&window.trustedTypes;if(Ks)try{$r=Ks.createPolicy("vue",{createHTML:e=>e})}catch{}const Yi=$r?e=>$r.createHTML(e):e=>e,Oc="http://www.w3.org/2000/svg",Nc="http://www.w3.org/1998/Math/MathML",_t=typeof document<"u"?document:null,Ys=_t&&_t.createElement("template"),Sc={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const l=t==="svg"?_t.createElementNS(Oc,e):t==="mathml"?_t.createElementNS(Nc,e):n?_t.createElement(e,{is:n}):_t.createElement(e);return e==="select"&&r&&r.multiple!=null&&l.setAttribute("multiple",r.multiple),l},createText:e=>_t.createTextNode(e),createComment:e=>_t.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>_t.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,r,l,s){const i=n?n.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),n),!(l===s||!(l=l.nextSibling)););else{Ys.innerHTML=Yi(r==="svg"?`<svg>${e}</svg>`:r==="mathml"?`<math>${e}</math>`:e);const o=Ys.content;if(r==="svg"||r==="mathml"){const a=o.firstChild;for(;a.firstChild;)o.appendChild(a.firstChild);o.removeChild(a)}t.insertBefore(o,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Cc=Symbol("_vtc");function Ac(e,t,n){const r=e[Cc];r&&(t=(t?[t,...r]:[...r]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}const Gs=Symbol("_vod"),Pc=Symbol("_vsh"),Rc=Symbol(""),Mc=/(^|;)\s*display\s*:/;function Dc(e,t,n){const r=e.style,l=me(n);let s=!1;if(n&&!l){if(t)if(me(t))for(const i of t.split(";")){const o=i.slice(0,i.indexOf(":")).trim();n[o]==null&&Vn(r,o,"")}else for(const i in t)n[i]==null&&Vn(r,i,"");for(const i in n)i==="display"&&(s=!0),Vn(r,i,n[i])}else if(l){if(t!==n){const i=r[Rc];i&&(n+=";"+i),r.cssText=n,s=Mc.test(n)}}else t&&e.removeAttribute("style");Gs in e&&(e[Gs]=s?r.display:"",e[Pc]&&(r.display="none"))}const Bs=/\s*!important$/;function Vn(e,t,n){if(Y(n))n.forEach(r=>Vn(e,t,r));else if(n==null&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const r=Fc(e,t);Bs.test(n)?e.setProperty(Ht(r),n.replace(Bs,""),"important"):e[r]=n}}const Xs=["Webkit","Moz","ms"],Lr={};function Fc(e,t){const n=Lr[t];if(n)return n;let r=St(t);if(r!=="filter"&&r in e)return Lr[t]=r;r=Hl(r);for(let l=0;l<Xs.length;l++){const s=Xs[l]+r;if(s in e)return Lr[t]=s}return t}const Js="http://www.w3.org/1999/xlink";function qs(e,t,n,r,l,s=Wo(t)){r&&t.startsWith("xlink:")?n==null?e.removeAttributeNS(Js,t.slice(6,t.length)):e.setAttributeNS(Js,t,n):n==null||s&&!Gl(n)?e.removeAttribute(t):e.setAttribute(t,s?"":rt(n)?String(n):n)}function Qs(e,t,n,r,l){if(t==="innerHTML"||t==="textContent"){n!=null&&(e[t]=t==="innerHTML"?Yi(n):n);return}const s=e.tagName;if(t==="value"&&s!=="PROGRESS"&&!s.includes("-")){const o=s==="OPTION"?e.getAttribute("value")||"":e.value,a=n==null?e.type==="checkbox"?"on":"":String(n);(o!==a||!("_value"in e))&&(e.value=a),n==null&&e.removeAttribute(t),e._value=n;return}let i=!1;if(n===""||n==null){const o=typeof e[t];o==="boolean"?n=Gl(n):n==null&&o==="string"?(n="",i=!0):o==="number"&&(n=0,i=!0)}try{e[t]=n}catch{}i&&e.removeAttribute(l||t)}function Gi(e,t,n,r){e.addEventListener(t,n,r)}function kc(e,t,n,r){e.removeEventListener(t,n,r)}const Zs=Symbol("_vei");function wc(e,t,n,r,l=null){const s=e[Zs]||(e[Zs]={}),i=s[t];if(r&&i)i.value=r;else{const[o,a]=xc(t);if(r){const d=s[t]=Wc(r,l);Gi(e,o,d,a)}else i&&(kc(e,o,i,a),s[t]=void 0)}}const zs=/(?:Once|Passive|Capture)$/;function xc(e){let t;if(zs.test(e)){t={};let r;for(;r=e.match(zs);)e=e.slice(0,e.length-r[0].length),t[r[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Ht(e.slice(2)),t]}let yr=0;const Uc=Promise.resolve(),$c=()=>yr||(Uc.then(()=>yr=0),yr=Date.now());function Wc(e,t){const n=r=>{if(!r._vts)r._vts=Date.now();else if(r._vts<=n.attached)return;st(jc(r,n.value),t,5,[r])};return n.value=e,n.attached=$c(),n}function jc(e,t){if(Y(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(r=>l=>!l._stopped&&r&&r(l))}else return t}const el=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,Vc=(e,t,n,r,l,s)=>{const i=l==="svg";t==="class"?Ac(e,r,i):t==="style"?Dc(e,n,r):er(t)?qr(t)||wc(e,t,n,r,s):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Hc(e,t,r,i))?(Qs(e,t,r),!e.tagName.includes("-")&&(t==="value"||t==="checked"||t==="selected")&&qs(e,t,r,i,s,t!=="value")):e._isVueCE&&(/[A-Z]/.test(t)||!me(r))?Qs(e,St(t),r,s,t):(t==="true-value"?e._trueValue=r:t==="false-value"&&(e._falseValue=r),qs(e,t,r,i))};function Hc(e,t,n,r){if(r)return!!(t==="innerHTML"||t==="textContent"||t in e&&el(t)&&B(n));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const l=e.tagName;if(l==="IMG"||l==="VIDEO"||l==="CANVAS"||l==="SOURCE")return!1}return el(t)&&me(n)?!1:t in e}const tl=e=>{const t=e.props["onUpdate:modelValue"]||!1;return Y(t)?n=>$n(t,n):t},Or=Symbol("_assign"),nl={deep:!0,created(e,{value:t,modifiers:{number:n}},r){const l=tr(t);Gi(e,"change",()=>{const s=Array.prototype.filter.call(e.options,i=>i.selected).map(i=>n?Yl(Qn(i)):Qn(i));e[Or](e.multiple?l?new Set(s):s:s[0]),e._assigning=!0,hi(()=>{e._assigning=!1})}),e[Or]=tl(r)},mounted(e,{value:t}){rl(e,t)},beforeUpdate(e,t,n){e[Or]=tl(n)},updated(e,{value:t}){e._assigning||rl(e,t)}};function rl(e,t){const n=e.multiple,r=Y(t);if(!(n&&!r&&!tr(t))){for(let l=0,s=e.options.length;l<s;l++){const i=e.options[l],o=Qn(i);if(n)if(r){const a=typeof o;a==="string"||a==="number"?i.selected=t.some(d=>String(d)===String(o)):i.selected=Vo(t,o)>-1}else i.selected=t.has(o);else if(sr(Qn(i),t)){e.selectedIndex!==l&&(e.selectedIndex=l);return}}!n&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function Qn(e){return"_value"in e?e._value:e.value}const Kc=Te({patchProp:Vc},Sc);let sl;function Yc(){return sl||(sl=Ja(Kc))}const Gc=(...e)=>{const t=Yc().createApp(...e),{mount:n}=t;return t.mount=r=>{const l=Xc(r);if(!l)return;const s=t._component;!B(s)&&!s.render&&!s.template&&(s.template=l.innerHTML),l.nodeType===1&&(l.textContent="");const i=n(l,!1,Bc(l));return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),i},t};function Bc(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function Xc(e){return me(e)?document.querySelector(e):e}const ll={personalInformation:{title:"personalInformation",content:[{label:"personal.name",value:"personal.nameRes"},{label:"personal.educationBackground",value:"personal.educationBackgroundRes"},{label:"personal.email",value:"personal.emailRes"},{label:"personal.phone",value:"personal.phoneRes"},{label:"personal.major",value:"personal.majorRes"}]},skillIntroduction:{title:"skillIntroduction",content:[{label:"skill.html"},{label:"skill.ui"},{label:"skill.framework"},{label:"skill.git"},{label:"skill.compatibility"},{label:"skill.performanceOptimization"}]}};/*!
  * shared v9.14.4
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */const Zn=typeof window<"u",Rt=(e,t=!1)=>t?Symbol.for(e):Symbol(e),Jc=(e,t,n)=>qc({l:e,k:t,s:n}),qc=e=>JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029").replace(/\u0027/g,"\\u0027"),de=e=>typeof e=="number"&&isFinite(e),Qc=e=>Xi(e)==="[object Date]",Ct=e=>Xi(e)==="[object RegExp]",ur=e=>G(e)&&Object.keys(e).length===0,Le=Object.assign,Zc=Object.create,ne=(e=null)=>Zc(e);let il;const pt=()=>il||(il=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:ne());function ol(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}const zc=Object.prototype.hasOwnProperty;function Ge(e,t){return zc.call(e,t)}const ae=Array.isArray,ie=e=>typeof e=="function",$=e=>typeof e=="string",J=e=>typeof e=="boolean",Q=e=>e!==null&&typeof e=="object",eu=e=>Q(e)&&ie(e.then)&&ie(e.catch),Bi=Object.prototype.toString,Xi=e=>Bi.call(e),G=e=>{if(!Q(e))return!1;const t=Object.getPrototypeOf(e);return t===null||t.constructor===Object},tu=e=>e==null?"":ae(e)||G(e)&&e.toString===Bi?JSON.stringify(e,null,2):String(e);function nu(e,t=""){return e.reduce((n,r,l)=>l===0?n+r:n+t+r,"")}function fr(e){let t=e;return()=>++t}function ru(e,t){typeof console<"u"&&(console.warn("[intlify] "+e),t&&console.warn(t.stack))}const xn=e=>!Q(e)||ae(e);function Hn(e,t){if(xn(e)||xn(t))throw new Error("Invalid value");const n=[{src:e,des:t}];for(;n.length;){const{src:r,des:l}=n.pop();Object.keys(r).forEach(s=>{s!=="__proto__"&&(Q(r[s])&&!Q(l[s])&&(l[s]=Array.isArray(r[s])?[]:ne()),xn(l[s])||xn(r[s])?l[s]=r[s]:n.push({src:r[s],des:l[s]}))})}}/*!
  * message-compiler v9.14.4
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */function su(e,t,n){return{line:e,column:t,offset:n}}function zn(e,t,n){const r={start:e,end:t};return n!=null&&(r.source=n),r}const lu=/\{([0-9a-zA-Z]+)\}/g;function Ji(e,...t){return t.length===1&&iu(t[0])&&(t=t[0]),(!t||!t.hasOwnProperty)&&(t={}),e.replace(lu,(n,r)=>t.hasOwnProperty(r)?t[r]:"")}const qi=Object.assign,al=e=>typeof e=="string",iu=e=>e!==null&&typeof e=="object";function Qi(e,t=""){return e.reduce((n,r,l)=>l===0?n+r:n+t+r,"")}const gs={USE_MODULO_SYNTAX:1,__EXTEND_POINT__:2},ou={[gs.USE_MODULO_SYNTAX]:"Use modulo before '{{0}}'."};function au(e,t,...n){const r=Ji(ou[e]||"",...n||[]),l={message:String(r),code:e};return t&&(l.location=t),l}const K={EXPECTED_TOKEN:1,INVALID_TOKEN_IN_PLACEHOLDER:2,UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER:3,UNKNOWN_ESCAPE_SEQUENCE:4,INVALID_UNICODE_ESCAPE_SEQUENCE:5,UNBALANCED_CLOSING_BRACE:6,UNTERMINATED_CLOSING_BRACE:7,EMPTY_PLACEHOLDER:8,NOT_ALLOW_NEST_PLACEHOLDER:9,INVALID_LINKED_FORMAT:10,MUST_HAVE_MESSAGES_IN_PLURAL:11,UNEXPECTED_EMPTY_LINKED_MODIFIER:12,UNEXPECTED_EMPTY_LINKED_KEY:13,UNEXPECTED_LEXICAL_ANALYSIS:14,UNHANDLED_CODEGEN_NODE_TYPE:15,UNHANDLED_MINIFIER_NODE_TYPE:16,__EXTEND_POINT__:17},cu={[K.EXPECTED_TOKEN]:"Expected token: '{0}'",[K.INVALID_TOKEN_IN_PLACEHOLDER]:"Invalid token in placeholder: '{0}'",[K.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]:"Unterminated single quote in placeholder",[K.UNKNOWN_ESCAPE_SEQUENCE]:"Unknown escape sequence: \\{0}",[K.INVALID_UNICODE_ESCAPE_SEQUENCE]:"Invalid unicode escape sequence: {0}",[K.UNBALANCED_CLOSING_BRACE]:"Unbalanced closing brace",[K.UNTERMINATED_CLOSING_BRACE]:"Unterminated closing brace",[K.EMPTY_PLACEHOLDER]:"Empty placeholder",[K.NOT_ALLOW_NEST_PLACEHOLDER]:"Not allowed nest placeholder",[K.INVALID_LINKED_FORMAT]:"Invalid linked format",[K.MUST_HAVE_MESSAGES_IN_PLURAL]:"Plural must have messages",[K.UNEXPECTED_EMPTY_LINKED_MODIFIER]:"Unexpected empty linked modifier",[K.UNEXPECTED_EMPTY_LINKED_KEY]:"Unexpected empty linked key",[K.UNEXPECTED_LEXICAL_ANALYSIS]:"Unexpected lexical analysis in token: '{0}'",[K.UNHANDLED_CODEGEN_NODE_TYPE]:"unhandled codegen node type: '{0}'",[K.UNHANDLED_MINIFIER_NODE_TYPE]:"unhandled mimifier node type: '{0}'"};function sn(e,t,n={}){const{domain:r,messages:l,args:s}=n,i=Ji((l||cu)[e]||"",...s||[]),o=new SyntaxError(String(i));return o.code=e,t&&(o.location=t),o.domain=r,o}function uu(e){throw e}const ft=" ",fu="\r",Ae=`
`,du=String.fromCharCode(8232),_u=String.fromCharCode(8233);function mu(e){const t=e;let n=0,r=1,l=1,s=0;const i=k=>t[k]===fu&&t[k+1]===Ae,o=k=>t[k]===Ae,a=k=>t[k]===_u,d=k=>t[k]===du,_=k=>i(k)||o(k)||a(k)||d(k),h=()=>n,b=()=>r,I=()=>l,M=()=>s,D=k=>i(k)||a(k)||d(k)?Ae:t[k],w=()=>D(n),F=()=>D(n+s);function j(){return s=0,_(n)&&(r++,l=0),i(n)&&n++,n++,l++,t[n]}function T(){return i(n+s)&&s++,s++,t[n+s]}function E(){n=0,r=1,l=1,s=0}function S(k=0){s=k}function y(){const k=n+s;for(;k!==n;)j();s=0}return{index:h,line:b,column:I,peekOffset:M,charAt:D,currentChar:w,currentPeek:F,next:j,peek:T,reset:E,resetPeek:S,skipToPeek:y}}const It=void 0,hu=".",cl="'",pu="tokenizer";function gu(e,t={}){const n=t.location!==!1,r=mu(e),l=()=>r.index(),s=()=>su(r.line(),r.column(),r.index()),i=s(),o=l(),a={currentType:14,offset:o,startLoc:i,endLoc:i,lastType:14,lastOffset:o,lastStartLoc:i,lastEndLoc:i,braceNest:0,inLinked:!1,text:""},d=()=>a,{onError:_}=t;function h(c,u,p,...N){const R=d();if(u.column+=p,u.offset+=p,_){const A=n?zn(R.startLoc,u):null,g=sn(c,A,{domain:pu,args:N});_(g)}}function b(c,u,p){c.endLoc=s(),c.currentType=u;const N={type:u};return n&&(N.loc=zn(c.startLoc,c.endLoc)),p!=null&&(N.value=p),N}const I=c=>b(c,14);function M(c,u){return c.currentChar()===u?(c.next(),u):(h(K.EXPECTED_TOKEN,s(),0,u),"")}function D(c){let u="";for(;c.currentPeek()===ft||c.currentPeek()===Ae;)u+=c.currentPeek(),c.peek();return u}function w(c){const u=D(c);return c.skipToPeek(),u}function F(c){if(c===It)return!1;const u=c.charCodeAt(0);return u>=97&&u<=122||u>=65&&u<=90||u===95}function j(c){if(c===It)return!1;const u=c.charCodeAt(0);return u>=48&&u<=57}function T(c,u){const{currentType:p}=u;if(p!==2)return!1;D(c);const N=F(c.currentPeek());return c.resetPeek(),N}function E(c,u){const{currentType:p}=u;if(p!==2)return!1;D(c);const N=c.currentPeek()==="-"?c.peek():c.currentPeek(),R=j(N);return c.resetPeek(),R}function S(c,u){const{currentType:p}=u;if(p!==2)return!1;D(c);const N=c.currentPeek()===cl;return c.resetPeek(),N}function y(c,u){const{currentType:p}=u;if(p!==8)return!1;D(c);const N=c.currentPeek()===".";return c.resetPeek(),N}function k(c,u){const{currentType:p}=u;if(p!==9)return!1;D(c);const N=F(c.currentPeek());return c.resetPeek(),N}function W(c,u){const{currentType:p}=u;if(!(p===8||p===12))return!1;D(c);const N=c.currentPeek()===":";return c.resetPeek(),N}function U(c,u){const{currentType:p}=u;if(p!==10)return!1;const N=()=>{const A=c.currentPeek();return A==="{"?F(c.peek()):A==="@"||A==="%"||A==="|"||A===":"||A==="."||A===ft||!A?!1:A===Ae?(c.peek(),N()):X(c,!1)},R=N();return c.resetPeek(),R}function te(c){D(c);const u=c.currentPeek()==="|";return c.resetPeek(),u}function he(c){const u=D(c),p=c.currentPeek()==="%"&&c.peek()==="{";return c.resetPeek(),{isModulo:p,hasSpace:u.length>0}}function X(c,u=!0){const p=(R=!1,A="",g=!1)=>{const L=c.currentPeek();return L==="{"?A==="%"?!1:R:L==="@"||!L?A==="%"?!0:R:L==="%"?(c.peek(),p(R,"%",!0)):L==="|"?A==="%"||g?!0:!(A===ft||A===Ae):L===ft?(c.peek(),p(!0,ft,g)):L===Ae?(c.peek(),p(!0,Ae,g)):!0},N=p();return u&&c.resetPeek(),N}function ue(c,u){const p=c.currentChar();return p===It?It:u(p)?(c.next(),p):null}function lt(c){const u=c.charCodeAt(0);return u>=97&&u<=122||u>=65&&u<=90||u>=48&&u<=57||u===95||u===36}function bt(c){return ue(c,lt)}function se(c){const u=c.charCodeAt(0);return u>=97&&u<=122||u>=65&&u<=90||u>=48&&u<=57||u===95||u===36||u===45}function ee(c){return ue(c,se)}function q(c){const u=c.charCodeAt(0);return u>=48&&u<=57}function De(c){return ue(c,q)}function qe(c){const u=c.charCodeAt(0);return u>=48&&u<=57||u>=65&&u<=70||u>=97&&u<=102}function pe(c){return ue(c,qe)}function be(c){let u="",p="";for(;u=De(c);)p+=u;return p}function Et(c){w(c);const u=c.currentChar();return u!=="%"&&h(K.EXPECTED_TOKEN,s(),0,u),c.next(),"%"}function vt(c){let u="";for(;;){const p=c.currentChar();if(p==="{"||p==="}"||p==="@"||p==="|"||!p)break;if(p==="%")if(X(c))u+=p,c.next();else break;else if(p===ft||p===Ae)if(X(c))u+=p,c.next();else{if(te(c))break;u+=p,c.next()}else u+=p,c.next()}return u}function Ft(c){w(c);let u="",p="";for(;u=ee(c);)p+=u;return c.currentChar()===It&&h(K.UNTERMINATED_CLOSING_BRACE,s(),0),p}function He(c){w(c);let u="";return c.currentChar()==="-"?(c.next(),u+=`-${be(c)}`):u+=be(c),c.currentChar()===It&&h(K.UNTERMINATED_CLOSING_BRACE,s(),0),u}function it(c){return c!==cl&&c!==Ae}function ot(c){w(c),M(c,"'");let u="",p="";for(;u=ue(c,it);)u==="\\"?p+=Tt(c):p+=u;const N=c.currentChar();return N===Ae||N===It?(h(K.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER,s(),0),N===Ae&&(c.next(),M(c,"'")),p):(M(c,"'"),p)}function Tt(c){const u=c.currentChar();switch(u){case"\\":case"'":return c.next(),`\\${u}`;case"u":return Fe(c,u,4);case"U":return Fe(c,u,6);default:return h(K.UNKNOWN_ESCAPE_SEQUENCE,s(),0,u),""}}function Fe(c,u,p){M(c,u);let N="";for(let R=0;R<p;R++){const A=pe(c);if(!A){h(K.INVALID_UNICODE_ESCAPE_SEQUENCE,s(),0,`\\${u}${N}${c.currentChar()}`);break}N+=A}return`\\${u}${N}`}function at(c){return c!=="{"&&c!=="}"&&c!==ft&&c!==Ae}function ct(c){w(c);let u="",p="";for(;u=ue(c,at);)p+=u;return p}function m(c){let u="",p="";for(;u=bt(c);)p+=u;return p}function f(c){const u=p=>{const N=c.currentChar();return N==="{"||N==="%"||N==="@"||N==="|"||N==="("||N===")"||!N||N===ft?p:(p+=N,c.next(),u(p))};return u("")}function v(c){w(c);const u=M(c,"|");return w(c),u}function P(c,u){let p=null;switch(c.currentChar()){case"{":return u.braceNest>=1&&h(K.NOT_ALLOW_NEST_PLACEHOLDER,s(),0),c.next(),p=b(u,2,"{"),w(c),u.braceNest++,p;case"}":return u.braceNest>0&&u.currentType===2&&h(K.EMPTY_PLACEHOLDER,s(),0),c.next(),p=b(u,3,"}"),u.braceNest--,u.braceNest>0&&w(c),u.inLinked&&u.braceNest===0&&(u.inLinked=!1),p;case"@":return u.braceNest>0&&h(K.UNTERMINATED_CLOSING_BRACE,s(),0),p=O(c,u)||I(u),u.braceNest=0,p;default:{let R=!0,A=!0,g=!0;if(te(c))return u.braceNest>0&&h(K.UNTERMINATED_CLOSING_BRACE,s(),0),p=b(u,1,v(c)),u.braceNest=0,u.inLinked=!1,p;if(u.braceNest>0&&(u.currentType===5||u.currentType===6||u.currentType===7))return h(K.UNTERMINATED_CLOSING_BRACE,s(),0),u.braceNest=0,C(c,u);if(R=T(c,u))return p=b(u,5,Ft(c)),w(c),p;if(A=E(c,u))return p=b(u,6,He(c)),w(c),p;if(g=S(c,u))return p=b(u,7,ot(c)),w(c),p;if(!R&&!A&&!g)return p=b(u,13,ct(c)),h(K.INVALID_TOKEN_IN_PLACEHOLDER,s(),0,p.value),w(c),p;break}}return p}function O(c,u){const{currentType:p}=u;let N=null;const R=c.currentChar();switch((p===8||p===9||p===12||p===10)&&(R===Ae||R===ft)&&h(K.INVALID_LINKED_FORMAT,s(),0),R){case"@":return c.next(),N=b(u,8,"@"),u.inLinked=!0,N;case".":return w(c),c.next(),b(u,9,".");case":":return w(c),c.next(),b(u,10,":");default:return te(c)?(N=b(u,1,v(c)),u.braceNest=0,u.inLinked=!1,N):y(c,u)||W(c,u)?(w(c),O(c,u)):k(c,u)?(w(c),b(u,12,m(c))):U(c,u)?(w(c),R==="{"?P(c,u)||N:b(u,11,f(c))):(p===8&&h(K.INVALID_LINKED_FORMAT,s(),0),u.braceNest=0,u.inLinked=!1,C(c,u))}}function C(c,u){let p={type:14};if(u.braceNest>0)return P(c,u)||I(u);if(u.inLinked)return O(c,u)||I(u);switch(c.currentChar()){case"{":return P(c,u)||I(u);case"}":return h(K.UNBALANCED_CLOSING_BRACE,s(),0),c.next(),b(u,3,"}");case"@":return O(c,u)||I(u);default:{if(te(c))return p=b(u,1,v(c)),u.braceNest=0,u.inLinked=!1,p;const{isModulo:R,hasSpace:A}=he(c);if(R)return A?b(u,0,vt(c)):b(u,4,Et(c));if(X(c))return b(u,0,vt(c));break}}return p}function x(){const{currentType:c,offset:u,startLoc:p,endLoc:N}=a;return a.lastType=c,a.lastOffset=u,a.lastStartLoc=p,a.lastEndLoc=N,a.offset=l(),a.startLoc=s(),r.currentChar()===It?b(a,14):C(r,a)}return{nextToken:x,currentOffset:l,currentPosition:s,context:d}}const bu="parser",Eu=/(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;function vu(e,t,n){switch(e){case"\\\\":return"\\";case"\\'":return"'";default:{const r=parseInt(t||n,16);return r<=55295||r>=57344?String.fromCodePoint(r):"�"}}}function Tu(e={}){const t=e.location!==!1,{onError:n,onWarn:r}=e;function l(T,E,S,y,...k){const W=T.currentPosition();if(W.offset+=y,W.column+=y,n){const U=t?zn(S,W):null,te=sn(E,U,{domain:bu,args:k});n(te)}}function s(T,E,S,y,...k){const W=T.currentPosition();if(W.offset+=y,W.column+=y,r){const U=t?zn(S,W):null;r(au(E,U,k))}}function i(T,E,S){const y={type:T};return t&&(y.start=E,y.end=E,y.loc={start:S,end:S}),y}function o(T,E,S,y){y&&(T.type=y),t&&(T.end=E,T.loc&&(T.loc.end=S))}function a(T,E){const S=T.context(),y=i(3,S.offset,S.startLoc);return y.value=E,o(y,T.currentOffset(),T.currentPosition()),y}function d(T,E){const S=T.context(),{lastOffset:y,lastStartLoc:k}=S,W=i(5,y,k);return W.index=parseInt(E,10),T.nextToken(),o(W,T.currentOffset(),T.currentPosition()),W}function _(T,E,S){const y=T.context(),{lastOffset:k,lastStartLoc:W}=y,U=i(4,k,W);return U.key=E,S===!0&&(U.modulo=!0),T.nextToken(),o(U,T.currentOffset(),T.currentPosition()),U}function h(T,E){const S=T.context(),{lastOffset:y,lastStartLoc:k}=S,W=i(9,y,k);return W.value=E.replace(Eu,vu),T.nextToken(),o(W,T.currentOffset(),T.currentPosition()),W}function b(T){const E=T.nextToken(),S=T.context(),{lastOffset:y,lastStartLoc:k}=S,W=i(8,y,k);return E.type!==12?(l(T,K.UNEXPECTED_EMPTY_LINKED_MODIFIER,S.lastStartLoc,0),W.value="",o(W,y,k),{nextConsumeToken:E,node:W}):(E.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,S.lastStartLoc,0,Ke(E)),W.value=E.value||"",o(W,T.currentOffset(),T.currentPosition()),{node:W})}function I(T,E){const S=T.context(),y=i(7,S.offset,S.startLoc);return y.value=E,o(y,T.currentOffset(),T.currentPosition()),y}function M(T){const E=T.context(),S=i(6,E.offset,E.startLoc);let y=T.nextToken();if(y.type===9){const k=b(T);S.modifier=k.node,y=k.nextConsumeToken||T.nextToken()}switch(y.type!==10&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(y)),y=T.nextToken(),y.type===2&&(y=T.nextToken()),y.type){case 11:y.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(y)),S.key=I(T,y.value||"");break;case 5:y.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(y)),S.key=_(T,y.value||"");break;case 6:y.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(y)),S.key=d(T,y.value||"");break;case 7:y.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(y)),S.key=h(T,y.value||"");break;default:{l(T,K.UNEXPECTED_EMPTY_LINKED_KEY,E.lastStartLoc,0);const k=T.context(),W=i(7,k.offset,k.startLoc);return W.value="",o(W,k.offset,k.startLoc),S.key=W,o(S,k.offset,k.startLoc),{nextConsumeToken:y,node:S}}}return o(S,T.currentOffset(),T.currentPosition()),{node:S}}function D(T){const E=T.context(),S=E.currentType===1?T.currentOffset():E.offset,y=E.currentType===1?E.endLoc:E.startLoc,k=i(2,S,y);k.items=[];let W=null,U=null;do{const X=W||T.nextToken();switch(W=null,X.type){case 0:X.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(X)),k.items.push(a(T,X.value||""));break;case 6:X.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(X)),k.items.push(d(T,X.value||""));break;case 4:U=!0;break;case 5:X.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(X)),k.items.push(_(T,X.value||"",!!U)),U&&(s(T,gs.USE_MODULO_SYNTAX,E.lastStartLoc,0,Ke(X)),U=null);break;case 7:X.value==null&&l(T,K.UNEXPECTED_LEXICAL_ANALYSIS,E.lastStartLoc,0,Ke(X)),k.items.push(h(T,X.value||""));break;case 8:{const ue=M(T);k.items.push(ue.node),W=ue.nextConsumeToken||null;break}}}while(E.currentType!==14&&E.currentType!==1);const te=E.currentType===1?E.lastOffset:T.currentOffset(),he=E.currentType===1?E.lastEndLoc:T.currentPosition();return o(k,te,he),k}function w(T,E,S,y){const k=T.context();let W=y.items.length===0;const U=i(1,E,S);U.cases=[],U.cases.push(y);do{const te=D(T);W||(W=te.items.length===0),U.cases.push(te)}while(k.currentType!==14);return W&&l(T,K.MUST_HAVE_MESSAGES_IN_PLURAL,S,0),o(U,T.currentOffset(),T.currentPosition()),U}function F(T){const E=T.context(),{offset:S,startLoc:y}=E,k=D(T);return E.currentType===14?k:w(T,S,y,k)}function j(T){const E=gu(T,qi({},e)),S=E.context(),y=i(0,S.offset,S.startLoc);return t&&y.loc&&(y.loc.source=T),y.body=F(E),e.onCacheKey&&(y.cacheKey=e.onCacheKey(T)),S.currentType!==14&&l(E,K.UNEXPECTED_LEXICAL_ANALYSIS,S.lastStartLoc,0,T[S.offset]||""),o(y,E.currentOffset(),E.currentPosition()),y}return{parse:j}}function Ke(e){if(e.type===14)return"EOF";const t=(e.value||"").replace(/\r?\n/gu,"\\n");return t.length>10?t.slice(0,9)+"…":t}function Iu(e,t={}){const n={ast:e,helpers:new Set};return{context:()=>n,helper:s=>(n.helpers.add(s),s)}}function ul(e,t){for(let n=0;n<e.length;n++)bs(e[n],t)}function bs(e,t){switch(e.type){case 1:ul(e.cases,t),t.helper("plural");break;case 2:ul(e.items,t);break;case 6:{bs(e.key,t),t.helper("linked"),t.helper("type");break}case 5:t.helper("interpolate"),t.helper("list");break;case 4:t.helper("interpolate"),t.helper("named");break}}function Lu(e,t={}){const n=Iu(e);n.helper("normalize"),e.body&&bs(e.body,n);const r=n.context();e.helpers=Array.from(r.helpers)}function yu(e){const t=e.body;return t.type===2?fl(t):t.cases.forEach(n=>fl(n)),e}function fl(e){if(e.items.length===1){const t=e.items[0];(t.type===3||t.type===9)&&(e.static=t.value,delete t.value)}else{const t=[];for(let n=0;n<e.items.length;n++){const r=e.items[n];if(!(r.type===3||r.type===9)||r.value==null)break;t.push(r.value)}if(t.length===e.items.length){e.static=Qi(t);for(let n=0;n<e.items.length;n++){const r=e.items[n];(r.type===3||r.type===9)&&delete r.value}}}}const Ou="minifier";function Bt(e){switch(e.t=e.type,e.type){case 0:{const t=e;Bt(t.body),t.b=t.body,delete t.body;break}case 1:{const t=e,n=t.cases;for(let r=0;r<n.length;r++)Bt(n[r]);t.c=n,delete t.cases;break}case 2:{const t=e,n=t.items;for(let r=0;r<n.length;r++)Bt(n[r]);t.i=n,delete t.items,t.static&&(t.s=t.static,delete t.static);break}case 3:case 9:case 8:case 7:{const t=e;t.value&&(t.v=t.value,delete t.value);break}case 6:{const t=e;Bt(t.key),t.k=t.key,delete t.key,t.modifier&&(Bt(t.modifier),t.m=t.modifier,delete t.modifier);break}case 5:{const t=e;t.i=t.index,delete t.index;break}case 4:{const t=e;t.k=t.key,delete t.key;break}default:throw sn(K.UNHANDLED_MINIFIER_NODE_TYPE,null,{domain:Ou,args:[e.type]})}delete e.type}const Nu="parser";function Su(e,t){const{sourceMap:n,filename:r,breakLineCode:l,needIndent:s}=t,i=t.location!==!1,o={filename:r,code:"",column:1,line:1,offset:0,map:void 0,breakLineCode:l,needIndent:s,indentLevel:0};i&&e.loc&&(o.source=e.loc.source);const a=()=>o;function d(w,F){o.code+=w}function _(w,F=!0){const j=F?l:"";d(s?j+"  ".repeat(w):j)}function h(w=!0){const F=++o.indentLevel;w&&_(F)}function b(w=!0){const F=--o.indentLevel;w&&_(F)}function I(){_(o.indentLevel)}return{context:a,push:d,indent:h,deindent:b,newline:I,helper:w=>`_${w}`,needIndent:()=>o.needIndent}}function Cu(e,t){const{helper:n}=e;e.push(`${n("linked")}(`),nn(e,t.key),t.modifier?(e.push(", "),nn(e,t.modifier),e.push(", _type")):e.push(", undefined, _type"),e.push(")")}function Au(e,t){const{helper:n,needIndent:r}=e;e.push(`${n("normalize")}([`),e.indent(r());const l=t.items.length;for(let s=0;s<l&&(nn(e,t.items[s]),s!==l-1);s++)e.push(", ");e.deindent(r()),e.push("])")}function Pu(e,t){const{helper:n,needIndent:r}=e;if(t.cases.length>1){e.push(`${n("plural")}([`),e.indent(r());const l=t.cases.length;for(let s=0;s<l&&(nn(e,t.cases[s]),s!==l-1);s++)e.push(", ");e.deindent(r()),e.push("])")}}function Ru(e,t){t.body?nn(e,t.body):e.push("null")}function nn(e,t){const{helper:n}=e;switch(t.type){case 0:Ru(e,t);break;case 1:Pu(e,t);break;case 2:Au(e,t);break;case 6:Cu(e,t);break;case 8:e.push(JSON.stringify(t.value),t);break;case 7:e.push(JSON.stringify(t.value),t);break;case 5:e.push(`${n("interpolate")}(${n("list")}(${t.index}))`,t);break;case 4:e.push(`${n("interpolate")}(${n("named")}(${JSON.stringify(t.key)}))`,t);break;case 9:e.push(JSON.stringify(t.value),t);break;case 3:e.push(JSON.stringify(t.value),t);break;default:throw sn(K.UNHANDLED_CODEGEN_NODE_TYPE,null,{domain:Nu,args:[t.type]})}}const Mu=(e,t={})=>{const n=al(t.mode)?t.mode:"normal",r=al(t.filename)?t.filename:"message.intl",l=!!t.sourceMap,s=t.breakLineCode!=null?t.breakLineCode:n==="arrow"?";":`
`,i=t.needIndent?t.needIndent:n!=="arrow",o=e.helpers||[],a=Su(e,{mode:n,filename:r,sourceMap:l,breakLineCode:s,needIndent:i});a.push(n==="normal"?"function __msg__ (ctx) {":"(ctx) => {"),a.indent(i),o.length>0&&(a.push(`const { ${Qi(o.map(h=>`${h}: _${h}`),", ")} } = ctx`),a.newline()),a.push("return "),nn(a,e),a.deindent(i),a.push("}"),delete e.helpers;const{code:d,map:_}=a.context();return{ast:e,code:d,map:_?_.toJSON():void 0}};function Du(e,t={}){const n=qi({},t),r=!!n.jit,l=!!n.minify,s=n.optimize==null?!0:n.optimize,o=Tu(n).parse(e);return r?(s&&yu(o),l&&Bt(o),{ast:o,code:""}):(Lu(o,n),Mu(o,n))}/*!
  * core-base v9.14.4
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */function Fu(){typeof __INTLIFY_PROD_DEVTOOLS__!="boolean"&&(pt().__INTLIFY_PROD_DEVTOOLS__=!1),typeof __INTLIFY_JIT_COMPILATION__!="boolean"&&(pt().__INTLIFY_JIT_COMPILATION__=!1),typeof __INTLIFY_DROP_MESSAGE_COMPILER__!="boolean"&&(pt().__INTLIFY_DROP_MESSAGE_COMPILER__=!1)}function nt(e){return Q(e)&&Es(e)===0&&(Ge(e,"b")||Ge(e,"body"))}const Zi=["b","body"];function ku(e){return Mt(e,Zi)}const zi=["c","cases"];function wu(e){return Mt(e,zi,[])}const eo=["s","static"];function xu(e){return Mt(e,eo)}const to=["i","items"];function Uu(e){return Mt(e,to,[])}const no=["t","type"];function Es(e){return Mt(e,no)}const ro=["v","value"];function Un(e,t){const n=Mt(e,ro);if(n!=null)return n;throw Sn(t)}const so=["m","modifier"];function $u(e){return Mt(e,so)}const lo=["k","key"];function Wu(e){const t=Mt(e,lo);if(t)return t;throw Sn(6)}function Mt(e,t,n){for(let r=0;r<t.length;r++){const l=t[r];if(Ge(e,l)&&e[l]!=null)return e[l]}return n}const io=[...Zi,...zi,...eo,...to,...lo,...so,...ro,...no];function Sn(e){return new Error(`unhandled node type: ${e}`)}const Dt=[];Dt[0]={w:[0],i:[3,0],"[":[4],o:[7]};Dt[1]={w:[1],".":[2],"[":[4],o:[7]};Dt[2]={w:[2],i:[3,0],0:[3,0]};Dt[3]={i:[3,0],0:[3,0],w:[1,1],".":[2,1],"[":[4,1],o:[7,1]};Dt[4]={"'":[5,0],'"':[6,0],"[":[4,2],"]":[1,3],o:8,l:[4,0]};Dt[5]={"'":[4,0],o:8,l:[5,0]};Dt[6]={'"':[4,0],o:8,l:[6,0]};const ju=/^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;function Vu(e){return ju.test(e)}function Hu(e){const t=e.charCodeAt(0),n=e.charCodeAt(e.length-1);return t===n&&(t===34||t===39)?e.slice(1,-1):e}function Ku(e){if(e==null)return"o";switch(e.charCodeAt(0)){case 91:case 93:case 46:case 34:case 39:return e;case 95:case 36:case 45:return"i";case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"w"}return"i"}function Yu(e){const t=e.trim();return e.charAt(0)==="0"&&isNaN(parseInt(e))?!1:Vu(t)?Hu(t):"*"+t}function Gu(e){const t=[];let n=-1,r=0,l=0,s,i,o,a,d,_,h;const b=[];b[0]=()=>{i===void 0?i=o:i+=o},b[1]=()=>{i!==void 0&&(t.push(i),i=void 0)},b[2]=()=>{b[0](),l++},b[3]=()=>{if(l>0)l--,r=4,b[0]();else{if(l=0,i===void 0||(i=Yu(i),i===!1))return!1;b[1]()}};function I(){const M=e[n+1];if(r===5&&M==="'"||r===6&&M==='"')return n++,o="\\"+M,b[0](),!0}for(;r!==null;)if(n++,s=e[n],!(s==="\\"&&I())){if(a=Ku(s),h=Dt[r],d=h[a]||h.l||8,d===8||(r=d[0],d[1]!==void 0&&(_=b[d[1]],_&&(o=s,_()===!1))))return;if(r===7)return t}}const dl=new Map;function Bu(e,t){return Q(e)?e[t]:null}function Xu(e,t){if(!Q(e))return null;let n=dl.get(t);if(n||(n=Gu(t),n&&dl.set(t,n)),!n)return null;const r=n.length;let l=e,s=0;for(;s<r;){const i=n[s];if(io.includes(i)&&nt(l))return null;const o=l[i];if(o===void 0||ie(l))return null;l=o,s++}return l}const Ju=e=>e,qu=e=>"",Qu="text",Zu=e=>e.length===0?"":nu(e),zu=tu;function _l(e,t){return e=Math.abs(e),t===2?e?e>1?1:0:1:e?Math.min(e,2):0}function ef(e){const t=de(e.pluralIndex)?e.pluralIndex:-1;return e.named&&(de(e.named.count)||de(e.named.n))?de(e.named.count)?e.named.count:de(e.named.n)?e.named.n:t:t}function tf(e,t){t.count||(t.count=e),t.n||(t.n=e)}function nf(e={}){const t=e.locale,n=ef(e),r=Q(e.pluralRules)&&$(t)&&ie(e.pluralRules[t])?e.pluralRules[t]:_l,l=Q(e.pluralRules)&&$(t)&&ie(e.pluralRules[t])?_l:void 0,s=F=>F[r(n,F.length,l)],i=e.list||[],o=F=>i[F],a=e.named||ne();de(e.pluralIndex)&&tf(n,a);const d=F=>a[F];function _(F){const j=ie(e.messages)?e.messages(F):Q(e.messages)?e.messages[F]:!1;return j||(e.parent?e.parent.message(F):qu)}const h=F=>e.modifiers?e.modifiers[F]:Ju,b=G(e.processor)&&ie(e.processor.normalize)?e.processor.normalize:Zu,I=G(e.processor)&&ie(e.processor.interpolate)?e.processor.interpolate:zu,M=G(e.processor)&&$(e.processor.type)?e.processor.type:Qu,w={list:o,named:d,plural:s,linked:(F,...j)=>{const[T,E]=j;let S="text",y="";j.length===1?Q(T)?(y=T.modifier||y,S=T.type||S):$(T)&&(y=T||y):j.length===2&&($(T)&&(y=T||y),$(E)&&(S=E||S));const k=_(F)(w),W=S==="vnode"&&ae(k)&&y?k[0]:k;return y?h(y)(W,S):W},message:_,type:M,interpolate:I,normalize:b,values:Le(ne(),i,a)};return w}let Cn=null;function rf(e){Cn=e}function sf(e,t,n){Cn&&Cn.emit("i18n:init",{timestamp:Date.now(),i18n:e,version:t,meta:n})}const lf=of("function:translate");function of(e){return t=>Cn&&Cn.emit(e,t)}const oo=gs.__EXTEND_POINT__,xt=fr(oo),af={NOT_FOUND_KEY:oo,FALLBACK_TO_TRANSLATE:xt(),CANNOT_FORMAT_NUMBER:xt(),FALLBACK_TO_NUMBER_FORMAT:xt(),CANNOT_FORMAT_DATE:xt(),FALLBACK_TO_DATE_FORMAT:xt(),EXPERIMENTAL_CUSTOM_MESSAGE_COMPILER:xt(),__EXTEND_POINT__:xt()},ao=K.__EXTEND_POINT__,Ut=fr(ao),Be={INVALID_ARGUMENT:ao,INVALID_DATE_ARGUMENT:Ut(),INVALID_ISO_DATE_ARGUMENT:Ut(),NOT_SUPPORT_NON_STRING_MESSAGE:Ut(),NOT_SUPPORT_LOCALE_PROMISE_VALUE:Ut(),NOT_SUPPORT_LOCALE_ASYNC_FUNCTION:Ut(),NOT_SUPPORT_LOCALE_TYPE:Ut(),__EXTEND_POINT__:Ut()};function tt(e){return sn(e,null,void 0)}function vs(e,t){return t.locale!=null?ml(t.locale):ml(e.locale)}let Nr;function ml(e){if($(e))return e;if(ie(e)){if(e.resolvedOnce&&Nr!=null)return Nr;if(e.constructor.name==="Function"){const t=e();if(eu(t))throw tt(Be.NOT_SUPPORT_LOCALE_PROMISE_VALUE);return Nr=t}else throw tt(Be.NOT_SUPPORT_LOCALE_ASYNC_FUNCTION)}else throw tt(Be.NOT_SUPPORT_LOCALE_TYPE)}function cf(e,t,n){return[...new Set([n,...ae(t)?t:Q(t)?Object.keys(t):$(t)?[t]:[n]])]}function co(e,t,n){const r=$(n)?n:rn,l=e;l.__localeChainCache||(l.__localeChainCache=new Map);let s=l.__localeChainCache.get(r);if(!s){s=[];let i=[n];for(;ae(i);)i=hl(s,i,t);const o=ae(t)||!G(t)?t:t.default?t.default:null;i=$(o)?[o]:o,ae(i)&&hl(s,i,!1),l.__localeChainCache.set(r,s)}return s}function hl(e,t,n){let r=!0;for(let l=0;l<t.length&&J(r);l++){const s=t[l];$(s)&&(r=uf(e,t[l],n))}return r}function uf(e,t,n){let r;const l=t.split("-");do{const s=l.join("-");r=ff(e,s,n),l.splice(-1,1)}while(l.length&&r===!0);return r}function ff(e,t,n){let r=!1;if(!e.includes(t)&&(r=!0,t)){r=t[t.length-1]!=="!";const l=t.replace(/!/g,"");e.push(l),(ae(n)||G(n))&&n[l]&&(r=n[l])}return r}const df="9.14.4",dr=-1,rn="en-US",pl="",gl=e=>`${e.charAt(0).toLocaleUpperCase()}${e.substr(1)}`;function _f(){return{upper:(e,t)=>t==="text"&&$(e)?e.toUpperCase():t==="vnode"&&Q(e)&&"__v_isVNode"in e?e.children.toUpperCase():e,lower:(e,t)=>t==="text"&&$(e)?e.toLowerCase():t==="vnode"&&Q(e)&&"__v_isVNode"in e?e.children.toLowerCase():e,capitalize:(e,t)=>t==="text"&&$(e)?gl(e):t==="vnode"&&Q(e)&&"__v_isVNode"in e?gl(e.children):e}}let uo;function bl(e){uo=e}let fo;function mf(e){fo=e}let _o;function hf(e){_o=e}let mo=null;const pf=e=>{mo=e},gf=()=>mo;let ho=null;const El=e=>{ho=e},bf=()=>ho;let vl=0;function Ef(e={}){const t=ie(e.onWarn)?e.onWarn:ru,n=$(e.version)?e.version:df,r=$(e.locale)||ie(e.locale)?e.locale:rn,l=ie(r)?rn:r,s=ae(e.fallbackLocale)||G(e.fallbackLocale)||$(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:l,i=G(e.messages)?e.messages:Sr(l),o=G(e.datetimeFormats)?e.datetimeFormats:Sr(l),a=G(e.numberFormats)?e.numberFormats:Sr(l),d=Le(ne(),e.modifiers,_f()),_=e.pluralRules||ne(),h=ie(e.missing)?e.missing:null,b=J(e.missingWarn)||Ct(e.missingWarn)?e.missingWarn:!0,I=J(e.fallbackWarn)||Ct(e.fallbackWarn)?e.fallbackWarn:!0,M=!!e.fallbackFormat,D=!!e.unresolving,w=ie(e.postTranslation)?e.postTranslation:null,F=G(e.processor)?e.processor:null,j=J(e.warnHtmlMessage)?e.warnHtmlMessage:!0,T=!!e.escapeParameter,E=ie(e.messageCompiler)?e.messageCompiler:uo,S=ie(e.messageResolver)?e.messageResolver:fo||Bu,y=ie(e.localeFallbacker)?e.localeFallbacker:_o||cf,k=Q(e.fallbackContext)?e.fallbackContext:void 0,W=e,U=Q(W.__datetimeFormatters)?W.__datetimeFormatters:new Map,te=Q(W.__numberFormatters)?W.__numberFormatters:new Map,he=Q(W.__meta)?W.__meta:{};vl++;const X={version:n,cid:vl,locale:r,fallbackLocale:s,messages:i,modifiers:d,pluralRules:_,missing:h,missingWarn:b,fallbackWarn:I,fallbackFormat:M,unresolving:D,postTranslation:w,processor:F,warnHtmlMessage:j,escapeParameter:T,messageCompiler:E,messageResolver:S,localeFallbacker:y,fallbackContext:k,onWarn:t,__meta:he};return X.datetimeFormats=o,X.numberFormats=a,X.__datetimeFormatters=U,X.__numberFormatters=te,__INTLIFY_PROD_DEVTOOLS__&&sf(X,n,he),X}const Sr=e=>({[e]:ne()});function Ts(e,t,n,r,l){const{missing:s,onWarn:i}=e;if(s!==null){const o=s(e,n,t,l);return $(o)?o:t}else return t}function un(e,t,n){const r=e;r.__localeChainCache=new Map,e.localeFallbacker(e,n,t)}function vf(e,t){return e===t?!1:e.split("-")[0]===t.split("-")[0]}function Tf(e,t){const n=t.indexOf(e);if(n===-1)return!1;for(let r=n+1;r<t.length;r++)if(vf(e,t[r]))return!0;return!1}function Cr(e){return n=>If(n,e)}function If(e,t){const n=ku(t);if(n==null)throw Sn(0);if(Es(n)===1){const s=wu(n);return e.plural(s.reduce((i,o)=>[...i,Tl(e,o)],[]))}else return Tl(e,n)}function Tl(e,t){const n=xu(t);if(n!=null)return e.type==="text"?n:e.normalize([n]);{const r=Uu(t).reduce((l,s)=>[...l,Wr(e,s)],[]);return e.normalize(r)}}function Wr(e,t){const n=Es(t);switch(n){case 3:return Un(t,n);case 9:return Un(t,n);case 4:{const r=t;if(Ge(r,"k")&&r.k)return e.interpolate(e.named(r.k));if(Ge(r,"key")&&r.key)return e.interpolate(e.named(r.key));throw Sn(n)}case 5:{const r=t;if(Ge(r,"i")&&de(r.i))return e.interpolate(e.list(r.i));if(Ge(r,"index")&&de(r.index))return e.interpolate(e.list(r.index));throw Sn(n)}case 6:{const r=t,l=$u(r),s=Wu(r);return e.linked(Wr(e,s),l?Wr(e,l):void 0,e.type)}case 7:return Un(t,n);case 8:return Un(t,n);default:throw new Error(`unhandled node on format message part: ${n}`)}}const po=e=>e;let Xt=ne();function go(e,t={}){let n=!1;const r=t.onError||uu;return t.onError=l=>{n=!0,r(l)},{...Du(e,t),detectError:n}}const Lf=(e,t)=>{if(!$(e))throw tt(Be.NOT_SUPPORT_NON_STRING_MESSAGE);{J(t.warnHtmlMessage)&&t.warnHtmlMessage;const r=(t.onCacheKey||po)(e),l=Xt[r];if(l)return l;const{code:s,detectError:i}=go(e,t),o=new Function(`return ${s}`)();return i?o:Xt[r]=o}};function yf(e,t){if(__INTLIFY_JIT_COMPILATION__&&!__INTLIFY_DROP_MESSAGE_COMPILER__&&$(e)){J(t.warnHtmlMessage)&&t.warnHtmlMessage;const r=(t.onCacheKey||po)(e),l=Xt[r];if(l)return l;const{ast:s,detectError:i}=go(e,{...t,location:!1,jit:!0}),o=Cr(s);return i?o:Xt[r]=o}else{const n=e.cacheKey;if(n){const r=Xt[n];return r||(Xt[n]=Cr(e))}else return Cr(e)}}const Il=()=>"",je=e=>ie(e);function Ll(e,...t){const{fallbackFormat:n,postTranslation:r,unresolving:l,messageCompiler:s,fallbackLocale:i,messages:o}=e,[a,d]=jr(...t),_=J(d.missingWarn)?d.missingWarn:e.missingWarn,h=J(d.fallbackWarn)?d.fallbackWarn:e.fallbackWarn,b=J(d.escapeParameter)?d.escapeParameter:e.escapeParameter,I=!!d.resolvedMessage,M=$(d.default)||J(d.default)?J(d.default)?s?a:()=>a:d.default:n?s?a:()=>a:"",D=n||M!=="",w=vs(e,d);b&&Of(d);let[F,j,T]=I?[a,w,o[w]||ne()]:bo(e,a,w,i,h,_),E=F,S=a;if(!I&&!($(E)||nt(E)||je(E))&&D&&(E=M,S=E),!I&&(!($(E)||nt(E)||je(E))||!$(j)))return l?dr:a;let y=!1;const k=()=>{y=!0},W=je(E)?E:Eo(e,a,j,E,S,k);if(y)return E;const U=Cf(e,j,T,d),te=nf(U),he=Nf(e,W,te),X=r?r(he,a):he;if(__INTLIFY_PROD_DEVTOOLS__){const ue={timestamp:Date.now(),key:$(a)?a:je(E)?E.key:"",locale:j||(je(E)?E.locale:""),format:$(E)?E:je(E)?E.source:"",message:X};ue.meta=Le({},e.__meta,gf()||{}),lf(ue)}return X}function Of(e){ae(e.list)?e.list=e.list.map(t=>$(t)?ol(t):t):Q(e.named)&&Object.keys(e.named).forEach(t=>{$(e.named[t])&&(e.named[t]=ol(e.named[t]))})}function bo(e,t,n,r,l,s){const{messages:i,onWarn:o,messageResolver:a,localeFallbacker:d}=e,_=d(e,r,n);let h=ne(),b,I=null;const M="translate";for(let D=0;D<_.length&&(b=_[D],h=i[b]||ne(),(I=a(h,t))===null&&(I=h[t]),!($(I)||nt(I)||je(I)));D++)if(!Tf(b,_)){const w=Ts(e,t,b,s,M);w!==t&&(I=w)}return[I,b,h]}function Eo(e,t,n,r,l,s){const{messageCompiler:i,warnHtmlMessage:o}=e;if(je(r)){const d=r;return d.locale=d.locale||n,d.key=d.key||t,d}if(i==null){const d=()=>r;return d.locale=n,d.key=t,d}const a=i(r,Sf(e,n,l,r,o,s));return a.locale=n,a.key=t,a.source=r,a}function Nf(e,t,n){return t(n)}function jr(...e){const[t,n,r]=e,l=ne();if(!$(t)&&!de(t)&&!je(t)&&!nt(t))throw tt(Be.INVALID_ARGUMENT);const s=de(t)?String(t):(je(t),t);return de(n)?l.plural=n:$(n)?l.default=n:G(n)&&!ur(n)?l.named=n:ae(n)&&(l.list=n),de(r)?l.plural=r:$(r)?l.default=r:G(r)&&Le(l,r),[s,l]}function Sf(e,t,n,r,l,s){return{locale:t,key:n,warnHtmlMessage:l,onError:i=>{throw s&&s(i),i},onCacheKey:i=>Jc(t,n,i)}}function Cf(e,t,n,r){const{modifiers:l,pluralRules:s,messageResolver:i,fallbackLocale:o,fallbackWarn:a,missingWarn:d,fallbackContext:_}=e,b={locale:t,modifiers:l,pluralRules:s,messages:I=>{let M=i(n,I);if(M==null&&_){const[,,D]=bo(_,I,t,o,a,d);M=i(D,I)}if($(M)||nt(M)){let D=!1;const F=Eo(e,I,t,M,I,()=>{D=!0});return D?Il:F}else return je(M)?M:Il}};return e.processor&&(b.processor=e.processor),r.list&&(b.list=r.list),r.named&&(b.named=r.named),de(r.plural)&&(b.pluralIndex=r.plural),b}function yl(e,...t){const{datetimeFormats:n,unresolving:r,fallbackLocale:l,onWarn:s,localeFallbacker:i}=e,{__datetimeFormatters:o}=e,[a,d,_,h]=Vr(...t),b=J(_.missingWarn)?_.missingWarn:e.missingWarn;J(_.fallbackWarn)?_.fallbackWarn:e.fallbackWarn;const I=!!_.part,M=vs(e,_),D=i(e,l,M);if(!$(a)||a==="")return new Intl.DateTimeFormat(M,h).format(d);let w={},F,j=null;const T="datetime format";for(let y=0;y<D.length&&(F=D[y],w=n[F]||{},j=w[a],!G(j));y++)Ts(e,a,F,b,T);if(!G(j)||!$(F))return r?dr:a;let E=`${F}__${a}`;ur(h)||(E=`${E}__${JSON.stringify(h)}`);let S=o.get(E);return S||(S=new Intl.DateTimeFormat(F,Le({},j,h)),o.set(E,S)),I?S.formatToParts(d):S.format(d)}const vo=["localeMatcher","weekday","era","year","month","day","hour","minute","second","timeZoneName","formatMatcher","hour12","timeZone","dateStyle","timeStyle","calendar","dayPeriod","numberingSystem","hourCycle","fractionalSecondDigits"];function Vr(...e){const[t,n,r,l]=e,s=ne();let i=ne(),o;if($(t)){const a=t.match(/(\d{4}-\d{2}-\d{2})(T|\s)?(.*)/);if(!a)throw tt(Be.INVALID_ISO_DATE_ARGUMENT);const d=a[3]?a[3].trim().startsWith("T")?`${a[1].trim()}${a[3].trim()}`:`${a[1].trim()}T${a[3].trim()}`:a[1].trim();o=new Date(d);try{o.toISOString()}catch{throw tt(Be.INVALID_ISO_DATE_ARGUMENT)}}else if(Qc(t)){if(isNaN(t.getTime()))throw tt(Be.INVALID_DATE_ARGUMENT);o=t}else if(de(t))o=t;else throw tt(Be.INVALID_ARGUMENT);return $(n)?s.key=n:G(n)&&Object.keys(n).forEach(a=>{vo.includes(a)?i[a]=n[a]:s[a]=n[a]}),$(r)?s.locale=r:G(r)&&(i=r),G(l)&&(i=l),[s.key||"",o,s,i]}function Ol(e,t,n){const r=e;for(const l in n){const s=`${t}__${l}`;r.__datetimeFormatters.has(s)&&r.__datetimeFormatters.delete(s)}}function Nl(e,...t){const{numberFormats:n,unresolving:r,fallbackLocale:l,onWarn:s,localeFallbacker:i}=e,{__numberFormatters:o}=e,[a,d,_,h]=Hr(...t),b=J(_.missingWarn)?_.missingWarn:e.missingWarn;J(_.fallbackWarn)?_.fallbackWarn:e.fallbackWarn;const I=!!_.part,M=vs(e,_),D=i(e,l,M);if(!$(a)||a==="")return new Intl.NumberFormat(M,h).format(d);let w={},F,j=null;const T="number format";for(let y=0;y<D.length&&(F=D[y],w=n[F]||{},j=w[a],!G(j));y++)Ts(e,a,F,b,T);if(!G(j)||!$(F))return r?dr:a;let E=`${F}__${a}`;ur(h)||(E=`${E}__${JSON.stringify(h)}`);let S=o.get(E);return S||(S=new Intl.NumberFormat(F,Le({},j,h)),o.set(E,S)),I?S.formatToParts(d):S.format(d)}const To=["localeMatcher","style","currency","currencyDisplay","currencySign","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","notation","signDisplay","unit","unitDisplay","roundingMode","roundingPriority","roundingIncrement","trailingZeroDisplay"];function Hr(...e){const[t,n,r,l]=e,s=ne();let i=ne();if(!de(t))throw tt(Be.INVALID_ARGUMENT);const o=t;return $(n)?s.key=n:G(n)&&Object.keys(n).forEach(a=>{To.includes(a)?i[a]=n[a]:s[a]=n[a]}),$(r)?s.locale=r:G(r)&&(i=r),G(l)&&(i=l),[s.key||"",o,s,i]}function Sl(e,t,n){const r=e;for(const l in n){const s=`${t}__${l}`;r.__numberFormatters.has(s)&&r.__numberFormatters.delete(s)}}Fu();/*!
  * vue-i18n v9.14.4
  * (c) 2025 kazuya kawaguchi
  * Released under the MIT License.
  */const Af="9.14.4";function Pf(){typeof __VUE_I18N_FULL_INSTALL__!="boolean"&&(pt().__VUE_I18N_FULL_INSTALL__=!0),typeof __VUE_I18N_LEGACY_API__!="boolean"&&(pt().__VUE_I18N_LEGACY_API__=!0),typeof __INTLIFY_JIT_COMPILATION__!="boolean"&&(pt().__INTLIFY_JIT_COMPILATION__=!1),typeof __INTLIFY_DROP_MESSAGE_COMPILER__!="boolean"&&(pt().__INTLIFY_DROP_MESSAGE_COMPILER__=!1),typeof __INTLIFY_PROD_DEVTOOLS__!="boolean"&&(pt().__INTLIFY_PROD_DEVTOOLS__=!1)}const Io=af.__EXTEND_POINT__,dt=fr(Io);dt(),dt(),dt(),dt(),dt(),dt(),dt(),dt(),dt();const Lo=Be.__EXTEND_POINT__,Re=fr(Lo),ge={UNEXPECTED_RETURN_TYPE:Lo,INVALID_ARGUMENT:Re(),MUST_BE_CALL_SETUP_TOP:Re(),NOT_INSTALLED:Re(),NOT_AVAILABLE_IN_LEGACY_MODE:Re(),REQUIRED_VALUE:Re(),INVALID_VALUE:Re(),CANNOT_SETUP_VUE_DEVTOOLS_PLUGIN:Re(),NOT_INSTALLED_WITH_PROVIDE:Re(),UNEXPECTED_ERROR:Re(),NOT_COMPATIBLE_LEGACY_VUE_I18N:Re(),BRIDGE_SUPPORT_VUE_2_ONLY:Re(),MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION:Re(),NOT_AVAILABLE_COMPOSITION_IN_LEGACY:Re(),__EXTEND_POINT__:Re()};function ve(e,...t){return sn(e,null,void 0)}const Kr=Rt("__translateVNode"),Yr=Rt("__datetimeParts"),Gr=Rt("__numberParts"),yo=Rt("__setPluralRules"),Oo=Rt("__injectWithOption"),Br=Rt("__dispose");function An(e){if(!Q(e)||nt(e))return e;for(const t in e)if(Ge(e,t))if(!t.includes("."))Q(e[t])&&An(e[t]);else{const n=t.split("."),r=n.length-1;let l=e,s=!1;for(let i=0;i<r;i++){if(n[i]==="__proto__")throw new Error(`unsafe key: ${n[i]}`);if(n[i]in l||(l[n[i]]=ne()),!Q(l[n[i]])){s=!0;break}l=l[n[i]]}if(s||(nt(l)?io.includes(n[r])||delete e[t]:(l[n[r]]=e[t],delete e[t])),!nt(l)){const i=l[n[r]];Q(i)&&An(i)}}return e}function _r(e,t){const{messages:n,__i18n:r,messageResolver:l,flatJson:s}=t,i=G(n)?n:ae(r)?ne():{[e]:ne()};if(ae(r)&&r.forEach(o=>{if("locale"in o&&"resource"in o){const{locale:a,resource:d}=o;a?(i[a]=i[a]||ne(),Hn(d,i[a])):Hn(d,i)}else $(o)&&Hn(JSON.parse(o),i)}),l==null&&s)for(const o in i)Ge(i,o)&&An(i[o]);return i}function No(e){return e.type}function So(e,t,n){let r=Q(t.messages)?t.messages:ne();"__i18nGlobal"in n&&(r=_r(e.locale.value,{messages:r,__i18n:n.__i18nGlobal}));const l=Object.keys(r);l.length&&l.forEach(s=>{e.mergeLocaleMessage(s,r[s])});{if(Q(t.datetimeFormats)){const s=Object.keys(t.datetimeFormats);s.length&&s.forEach(i=>{e.mergeDateTimeFormat(i,t.datetimeFormats[i])})}if(Q(t.numberFormats)){const s=Object.keys(t.numberFormats);s.length&&s.forEach(i=>{e.mergeNumberFormat(i,t.numberFormats[i])})}}}function Cl(e){return We(Mn,null,e,0)}const Al="__INTLIFY_META__",Pl=()=>[],Rf=()=>!1;let Rl=0;function Ml(e){return(t,n,r,l)=>e(n,r,On()||void 0,l)}const Mf=()=>{const e=On();let t=null;return e&&(t=No(e)[Al])?{[Al]:t}:null};function Is(e={},t){const{__root:n,__injectWithOption:r}=e,l=n===void 0,s=e.flatJson,i=Zn?Ot:fi,o=!!e.translateExistCompatible;let a=J(e.inheritLocale)?e.inheritLocale:!0;const d=i(n&&a?n.locale.value:$(e.locale)?e.locale:rn),_=i(n&&a?n.fallbackLocale.value:$(e.fallbackLocale)||ae(e.fallbackLocale)||G(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:d.value),h=i(_r(d.value,e)),b=i(G(e.datetimeFormats)?e.datetimeFormats:{[d.value]:{}}),I=i(G(e.numberFormats)?e.numberFormats:{[d.value]:{}});let M=n?n.missingWarn:J(e.missingWarn)||Ct(e.missingWarn)?e.missingWarn:!0,D=n?n.fallbackWarn:J(e.fallbackWarn)||Ct(e.fallbackWarn)?e.fallbackWarn:!0,w=n?n.fallbackRoot:J(e.fallbackRoot)?e.fallbackRoot:!0,F=!!e.fallbackFormat,j=ie(e.missing)?e.missing:null,T=ie(e.missing)?Ml(e.missing):null,E=ie(e.postTranslation)?e.postTranslation:null,S=n?n.warnHtmlMessage:J(e.warnHtmlMessage)?e.warnHtmlMessage:!0,y=!!e.escapeParameter;const k=n?n.modifiers:G(e.modifiers)?e.modifiers:{};let W=e.pluralRules||n&&n.pluralRules,U;U=(()=>{l&&El(null);const g={version:Af,locale:d.value,fallbackLocale:_.value,messages:h.value,modifiers:k,pluralRules:W,missing:T===null?void 0:T,missingWarn:M,fallbackWarn:D,fallbackFormat:F,unresolving:!0,postTranslation:E===null?void 0:E,warnHtmlMessage:S,escapeParameter:y,messageResolver:e.messageResolver,messageCompiler:e.messageCompiler,__meta:{framework:"vue"}};g.datetimeFormats=b.value,g.numberFormats=I.value,g.__datetimeFormatters=G(U)?U.__datetimeFormatters:void 0,g.__numberFormatters=G(U)?U.__numberFormatters:void 0;const L=Ef(g);return l&&El(L),L})(),un(U,d.value,_.value);function he(){return[d.value,_.value,h.value,b.value,I.value]}const X=Ye({get:()=>d.value,set:g=>{d.value=g,U.locale=d.value}}),ue=Ye({get:()=>_.value,set:g=>{_.value=g,U.fallbackLocale=_.value,un(U,d.value,g)}}),lt=Ye(()=>h.value),bt=Ye(()=>b.value),se=Ye(()=>I.value);function ee(){return ie(E)?E:null}function q(g){E=g,U.postTranslation=g}function De(){return j}function qe(g){g!==null&&(T=Ml(g)),j=g,U.missing=T}const pe=(g,L,V,H,ce,fe)=>{he();let Ee;try{__INTLIFY_PROD_DEVTOOLS__,l||(U.fallbackContext=n?bf():void 0),Ee=g(U)}finally{__INTLIFY_PROD_DEVTOOLS__,l||(U.fallbackContext=void 0)}if(V!=="translate exists"&&de(Ee)&&Ee===dr||V==="translate exists"&&!Ee){const[Se,Kt]=L();return n&&w?H(n):ce(Se)}else{if(fe(Ee))return Ee;throw ve(ge.UNEXPECTED_RETURN_TYPE)}};function be(...g){return pe(L=>Reflect.apply(Ll,null,[L,...g]),()=>jr(...g),"translate",L=>Reflect.apply(L.t,L,[...g]),L=>L,L=>$(L))}function Et(...g){const[L,V,H]=g;if(H&&!Q(H))throw ve(ge.INVALID_ARGUMENT);return be(L,V,Le({resolvedMessage:!0},H||{}))}function vt(...g){return pe(L=>Reflect.apply(yl,null,[L,...g]),()=>Vr(...g),"datetime format",L=>Reflect.apply(L.d,L,[...g]),()=>pl,L=>$(L))}function Ft(...g){return pe(L=>Reflect.apply(Nl,null,[L,...g]),()=>Hr(...g),"number format",L=>Reflect.apply(L.n,L,[...g]),()=>pl,L=>$(L))}function He(g){return g.map(L=>$(L)||de(L)||J(L)?Cl(String(L)):L)}const ot={normalize:He,interpolate:g=>g,type:"vnode"};function Tt(...g){return pe(L=>{let V;const H=L;try{H.processor=ot,V=Reflect.apply(Ll,null,[H,...g])}finally{H.processor=null}return V},()=>jr(...g),"translate",L=>L[Kr](...g),L=>[Cl(L)],L=>ae(L))}function Fe(...g){return pe(L=>Reflect.apply(Nl,null,[L,...g]),()=>Hr(...g),"number format",L=>L[Gr](...g),Pl,L=>$(L)||ae(L))}function at(...g){return pe(L=>Reflect.apply(yl,null,[L,...g]),()=>Vr(...g),"datetime format",L=>L[Yr](...g),Pl,L=>$(L)||ae(L))}function ct(g){W=g,U.pluralRules=W}function m(g,L){return pe(()=>{if(!g)return!1;const V=$(L)?L:d.value,H=P(V),ce=U.messageResolver(H,g);return o?ce!=null:nt(ce)||je(ce)||$(ce)},()=>[g],"translate exists",V=>Reflect.apply(V.te,V,[g,L]),Rf,V=>J(V))}function f(g){let L=null;const V=co(U,_.value,d.value);for(let H=0;H<V.length;H++){const ce=h.value[V[H]]||{},fe=U.messageResolver(ce,g);if(fe!=null){L=fe;break}}return L}function v(g){const L=f(g);return L??(n?n.tm(g)||{}:{})}function P(g){return h.value[g]||{}}function O(g,L){if(s){const V={[g]:L};for(const H in V)Ge(V,H)&&An(V[H]);L=V[g]}h.value[g]=L,U.messages=h.value}function C(g,L){h.value[g]=h.value[g]||{};const V={[g]:L};if(s)for(const H in V)Ge(V,H)&&An(V[H]);L=V[g],Hn(L,h.value[g]),U.messages=h.value}function x(g){return b.value[g]||{}}function c(g,L){b.value[g]=L,U.datetimeFormats=b.value,Ol(U,g,L)}function u(g,L){b.value[g]=Le(b.value[g]||{},L),U.datetimeFormats=b.value,Ol(U,g,L)}function p(g){return I.value[g]||{}}function N(g,L){I.value[g]=L,U.numberFormats=I.value,Sl(U,g,L)}function R(g,L){I.value[g]=Le(I.value[g]||{},L),U.numberFormats=I.value,Sl(U,g,L)}Rl++,n&&Zn&&(en(n.locale,g=>{a&&(d.value=g,U.locale=g,un(U,d.value,_.value))}),en(n.fallbackLocale,g=>{a&&(_.value=g,U.fallbackLocale=g,un(U,d.value,_.value))}));const A={id:Rl,locale:X,fallbackLocale:ue,get inheritLocale(){return a},set inheritLocale(g){a=g,g&&n&&(d.value=n.locale.value,_.value=n.fallbackLocale.value,un(U,d.value,_.value))},get availableLocales(){return Object.keys(h.value).sort()},messages:lt,get modifiers(){return k},get pluralRules(){return W||{}},get isGlobal(){return l},get missingWarn(){return M},set missingWarn(g){M=g,U.missingWarn=M},get fallbackWarn(){return D},set fallbackWarn(g){D=g,U.fallbackWarn=D},get fallbackRoot(){return w},set fallbackRoot(g){w=g},get fallbackFormat(){return F},set fallbackFormat(g){F=g,U.fallbackFormat=F},get warnHtmlMessage(){return S},set warnHtmlMessage(g){S=g,U.warnHtmlMessage=g},get escapeParameter(){return y},set escapeParameter(g){y=g,U.escapeParameter=g},t:be,getLocaleMessage:P,setLocaleMessage:O,mergeLocaleMessage:C,getPostTranslationHandler:ee,setPostTranslationHandler:q,getMissingHandler:De,setMissingHandler:qe,[yo]:ct};return A.datetimeFormats=bt,A.numberFormats=se,A.rt=Et,A.te=m,A.tm=v,A.d=vt,A.n=Ft,A.getDateTimeFormat=x,A.setDateTimeFormat=c,A.mergeDateTimeFormat=u,A.getNumberFormat=p,A.setNumberFormat=N,A.mergeNumberFormat=R,A[Oo]=r,A[Kr]=Tt,A[Yr]=at,A[Gr]=Fe,A}function Df(e){const t=$(e.locale)?e.locale:rn,n=$(e.fallbackLocale)||ae(e.fallbackLocale)||G(e.fallbackLocale)||e.fallbackLocale===!1?e.fallbackLocale:t,r=ie(e.missing)?e.missing:void 0,l=J(e.silentTranslationWarn)||Ct(e.silentTranslationWarn)?!e.silentTranslationWarn:!0,s=J(e.silentFallbackWarn)||Ct(e.silentFallbackWarn)?!e.silentFallbackWarn:!0,i=J(e.fallbackRoot)?e.fallbackRoot:!0,o=!!e.formatFallbackMessages,a=G(e.modifiers)?e.modifiers:{},d=e.pluralizationRules,_=ie(e.postTranslation)?e.postTranslation:void 0,h=$(e.warnHtmlInMessage)?e.warnHtmlInMessage!=="off":!0,b=!!e.escapeParameterHtml,I=J(e.sync)?e.sync:!0;let M=e.messages;if(G(e.sharedMessages)){const y=e.sharedMessages;M=Object.keys(y).reduce((W,U)=>{const te=W[U]||(W[U]={});return Le(te,y[U]),W},M||{})}const{__i18n:D,__root:w,__injectWithOption:F}=e,j=e.datetimeFormats,T=e.numberFormats,E=e.flatJson,S=e.translateExistCompatible;return{locale:t,fallbackLocale:n,messages:M,flatJson:E,datetimeFormats:j,numberFormats:T,missing:r,missingWarn:l,fallbackWarn:s,fallbackRoot:i,fallbackFormat:o,modifiers:a,pluralRules:d,postTranslation:_,warnHtmlMessage:h,escapeParameter:b,messageResolver:e.messageResolver,inheritLocale:I,translateExistCompatible:S,__i18n:D,__root:w,__injectWithOption:F}}function Xr(e={},t){{const n=Is(Df(e)),{__extender:r}=e,l={id:n.id,get locale(){return n.locale.value},set locale(s){n.locale.value=s},get fallbackLocale(){return n.fallbackLocale.value},set fallbackLocale(s){n.fallbackLocale.value=s},get messages(){return n.messages.value},get datetimeFormats(){return n.datetimeFormats.value},get numberFormats(){return n.numberFormats.value},get availableLocales(){return n.availableLocales},get formatter(){return{interpolate(){return[]}}},set formatter(s){},get missing(){return n.getMissingHandler()},set missing(s){n.setMissingHandler(s)},get silentTranslationWarn(){return J(n.missingWarn)?!n.missingWarn:n.missingWarn},set silentTranslationWarn(s){n.missingWarn=J(s)?!s:s},get silentFallbackWarn(){return J(n.fallbackWarn)?!n.fallbackWarn:n.fallbackWarn},set silentFallbackWarn(s){n.fallbackWarn=J(s)?!s:s},get modifiers(){return n.modifiers},get formatFallbackMessages(){return n.fallbackFormat},set formatFallbackMessages(s){n.fallbackFormat=s},get postTranslation(){return n.getPostTranslationHandler()},set postTranslation(s){n.setPostTranslationHandler(s)},get sync(){return n.inheritLocale},set sync(s){n.inheritLocale=s},get warnHtmlInMessage(){return n.warnHtmlMessage?"warn":"off"},set warnHtmlInMessage(s){n.warnHtmlMessage=s!=="off"},get escapeParameterHtml(){return n.escapeParameter},set escapeParameterHtml(s){n.escapeParameter=s},get preserveDirectiveContent(){return!0},set preserveDirectiveContent(s){},get pluralizationRules(){return n.pluralRules||{}},__composer:n,t(...s){const[i,o,a]=s,d={};let _=null,h=null;if(!$(i))throw ve(ge.INVALID_ARGUMENT);const b=i;return $(o)?d.locale=o:ae(o)?_=o:G(o)&&(h=o),ae(a)?_=a:G(a)&&(h=a),Reflect.apply(n.t,n,[b,_||h||{},d])},rt(...s){return Reflect.apply(n.rt,n,[...s])},tc(...s){const[i,o,a]=s,d={plural:1};let _=null,h=null;if(!$(i))throw ve(ge.INVALID_ARGUMENT);const b=i;return $(o)?d.locale=o:de(o)?d.plural=o:ae(o)?_=o:G(o)&&(h=o),$(a)?d.locale=a:ae(a)?_=a:G(a)&&(h=a),Reflect.apply(n.t,n,[b,_||h||{},d])},te(s,i){return n.te(s,i)},tm(s){return n.tm(s)},getLocaleMessage(s){return n.getLocaleMessage(s)},setLocaleMessage(s,i){n.setLocaleMessage(s,i)},mergeLocaleMessage(s,i){n.mergeLocaleMessage(s,i)},d(...s){return Reflect.apply(n.d,n,[...s])},getDateTimeFormat(s){return n.getDateTimeFormat(s)},setDateTimeFormat(s,i){n.setDateTimeFormat(s,i)},mergeDateTimeFormat(s,i){n.mergeDateTimeFormat(s,i)},n(...s){return Reflect.apply(n.n,n,[...s])},getNumberFormat(s){return n.getNumberFormat(s)},setNumberFormat(s,i){n.setNumberFormat(s,i)},mergeNumberFormat(s,i){n.mergeNumberFormat(s,i)},getChoiceIndex(s,i){return-1}};return l.__extender=r,l}}const Ls={tag:{type:[String,Object]},locale:{type:String},scope:{type:String,validator:e=>e==="parent"||e==="global",default:"parent"},i18n:{type:Object}};function Ff({slots:e},t){return t.length===1&&t[0]==="default"?(e.default?e.default():[]).reduce((r,l)=>[...r,...l.type===Me?l.children:[l]],[]):t.reduce((n,r)=>{const l=e[r];return l&&(n[r]=l()),n},ne())}function Co(e){return Me}const kf=fs({name:"i18n-t",props:Le({keypath:{type:String,required:!0},plural:{type:[Number,String],validator:e=>de(e)||!isNaN(e)}},Ls),setup(e,t){const{slots:n,attrs:r}=t,l=e.i18n||mr({useScope:e.scope,__useComponent:!0});return()=>{const s=Object.keys(n).filter(h=>h!=="_"),i=ne();e.locale&&(i.locale=e.locale),e.plural!==void 0&&(i.plural=$(e.plural)?+e.plural:e.plural);const o=Ff(t,s),a=l[Kr](e.keypath,o,i),d=Le(ne(),r),_=$(e.tag)||Q(e.tag)?e.tag:Co();return Ki(_,d,a)}}}),Dl=kf;function wf(e){return ae(e)&&!$(e[0])}function Ao(e,t,n,r){const{slots:l,attrs:s}=t;return()=>{const i={part:!0};let o=ne();e.locale&&(i.locale=e.locale),$(e.format)?i.key=e.format:Q(e.format)&&($(e.format.key)&&(i.key=e.format.key),o=Object.keys(e.format).reduce((b,I)=>n.includes(I)?Le(ne(),b,{[I]:e.format[I]}):b,ne()));const a=r(e.value,i,o);let d=[i.key];ae(a)?d=a.map((b,I)=>{const M=l[b.type],D=M?M({[b.type]:b.value,index:I,parts:a}):[b.value];return wf(D)&&(D[0].key=`${b.type}-${I}`),D}):$(a)&&(d=[a]);const _=Le(ne(),s),h=$(e.tag)||Q(e.tag)?e.tag:Co();return Ki(h,_,d)}}const xf=fs({name:"i18n-n",props:Le({value:{type:Number,required:!0},format:{type:[String,Object]}},Ls),setup(e,t){const n=e.i18n||mr({useScope:e.scope,__useComponent:!0});return Ao(e,t,To,(...r)=>n[Gr](...r))}}),Fl=xf,Uf=fs({name:"i18n-d",props:Le({value:{type:[Number,Date],required:!0},format:{type:[String,Object]}},Ls),setup(e,t){const n=e.i18n||mr({useScope:e.scope,__useComponent:!0});return Ao(e,t,vo,(...r)=>n[Yr](...r))}}),kl=Uf;function $f(e,t){const n=e;if(e.mode==="composition")return n.__getInstance(t)||e.global;{const r=n.__getInstance(t);return r!=null?r.__composer:e.global.__composer}}function Wf(e){const t=i=>{const{instance:o,modifiers:a,value:d}=i;if(!o||!o.$)throw ve(ge.UNEXPECTED_ERROR);const _=$f(e,o.$),h=wl(d);return[Reflect.apply(_.t,_,[...xl(h)]),_]};return{created:(i,o)=>{const[a,d]=t(o);Zn&&e.global===d&&(i.__i18nWatcher=en(d.locale,()=>{o.instance&&o.instance.$forceUpdate()})),i.__composer=d,i.textContent=a},unmounted:i=>{Zn&&i.__i18nWatcher&&(i.__i18nWatcher(),i.__i18nWatcher=void 0,delete i.__i18nWatcher),i.__composer&&(i.__composer=void 0,delete i.__composer)},beforeUpdate:(i,{value:o})=>{if(i.__composer){const a=i.__composer,d=wl(o);i.textContent=Reflect.apply(a.t,a,[...xl(d)])}},getSSRProps:i=>{const[o]=t(i);return{textContent:o}}}}function wl(e){if($(e))return{path:e};if(G(e)){if(!("path"in e))throw ve(ge.REQUIRED_VALUE,"path");return e}else throw ve(ge.INVALID_VALUE)}function xl(e){const{path:t,locale:n,args:r,choice:l,plural:s}=e,i={},o=r||{};return $(n)&&(i.locale=n),de(l)&&(i.plural=l),de(s)&&(i.plural=s),[t,o,i]}function jf(e,t,...n){const r=G(n[0])?n[0]:{},l=!!r.useI18nComponentName;(J(r.globalInstall)?r.globalInstall:!0)&&([l?"i18n":Dl.name,"I18nT"].forEach(i=>e.component(i,Dl)),[Fl.name,"I18nN"].forEach(i=>e.component(i,Fl)),[kl.name,"I18nD"].forEach(i=>e.component(i,kl))),e.directive("t",Wf(t))}function Vf(e,t,n){return{beforeCreate(){const r=On();if(!r)throw ve(ge.UNEXPECTED_ERROR);const l=this.$options;if(l.i18n){const s=l.i18n;if(l.__i18n&&(s.__i18n=l.__i18n),s.__root=t,this===this.$root)this.$i18n=Ul(e,s);else{s.__injectWithOption=!0,s.__extender=n.__vueI18nExtend,this.$i18n=Xr(s);const i=this.$i18n;i.__extender&&(i.__disposer=i.__extender(this.$i18n))}}else if(l.__i18n)if(this===this.$root)this.$i18n=Ul(e,l);else{this.$i18n=Xr({__i18n:l.__i18n,__injectWithOption:!0,__extender:n.__vueI18nExtend,__root:t});const s=this.$i18n;s.__extender&&(s.__disposer=s.__extender(this.$i18n))}else this.$i18n=e;l.__i18nGlobal&&So(t,l,l),this.$t=(...s)=>this.$i18n.t(...s),this.$rt=(...s)=>this.$i18n.rt(...s),this.$tc=(...s)=>this.$i18n.tc(...s),this.$te=(s,i)=>this.$i18n.te(s,i),this.$d=(...s)=>this.$i18n.d(...s),this.$n=(...s)=>this.$i18n.n(...s),this.$tm=s=>this.$i18n.tm(s),n.__setInstance(r,this.$i18n)},mounted(){},unmounted(){const r=On();if(!r)throw ve(ge.UNEXPECTED_ERROR);const l=this.$i18n;delete this.$t,delete this.$rt,delete this.$tc,delete this.$te,delete this.$d,delete this.$n,delete this.$tm,l.__disposer&&(l.__disposer(),delete l.__disposer,delete l.__extender),n.__deleteInstance(r),delete this.$i18n}}}function Ul(e,t){e.locale=t.locale||e.locale,e.fallbackLocale=t.fallbackLocale||e.fallbackLocale,e.missing=t.missing||e.missing,e.silentTranslationWarn=t.silentTranslationWarn||e.silentFallbackWarn,e.silentFallbackWarn=t.silentFallbackWarn||e.silentFallbackWarn,e.formatFallbackMessages=t.formatFallbackMessages||e.formatFallbackMessages,e.postTranslation=t.postTranslation||e.postTranslation,e.warnHtmlInMessage=t.warnHtmlInMessage||e.warnHtmlInMessage,e.escapeParameterHtml=t.escapeParameterHtml||e.escapeParameterHtml,e.sync=t.sync||e.sync,e.__composer[yo](t.pluralizationRules||e.pluralizationRules);const n=_r(e.locale,{messages:t.messages,__i18n:t.__i18n});return Object.keys(n).forEach(r=>e.mergeLocaleMessage(r,n[r])),t.datetimeFormats&&Object.keys(t.datetimeFormats).forEach(r=>e.mergeDateTimeFormat(r,t.datetimeFormats[r])),t.numberFormats&&Object.keys(t.numberFormats).forEach(r=>e.mergeNumberFormat(r,t.numberFormats[r])),e}const Hf=Rt("global-vue-i18n");function Kf(e={},t){const n=__VUE_I18N_LEGACY_API__&&J(e.legacy)?e.legacy:__VUE_I18N_LEGACY_API__,r=J(e.globalInjection)?e.globalInjection:!0,l=__VUE_I18N_LEGACY_API__&&n?!!e.allowComposition:!0,s=new Map,[i,o]=Yf(e,n),a=Rt("");function d(b){return s.get(b)||null}function _(b,I){s.set(b,I)}function h(b){s.delete(b)}{const b={get mode(){return __VUE_I18N_LEGACY_API__&&n?"legacy":"composition"},get allowComposition(){return l},async install(I,...M){if(I.__VUE_I18N_SYMBOL__=a,I.provide(I.__VUE_I18N_SYMBOL__,b),G(M[0])){const F=M[0];b.__composerExtend=F.__composerExtend,b.__vueI18nExtend=F.__vueI18nExtend}let D=null;!n&&r&&(D=ed(I,b.global)),__VUE_I18N_FULL_INSTALL__&&jf(I,b,...M),__VUE_I18N_LEGACY_API__&&n&&I.mixin(Vf(o,o.__composer,b));const w=I.unmount;I.unmount=()=>{D&&D(),b.dispose(),w()}},get global(){return o},dispose(){i.stop()},__instances:s,__getInstance:d,__setInstance:_,__deleteInstance:h};return b}}function mr(e={}){const t=On();if(t==null)throw ve(ge.MUST_BE_CALL_SETUP_TOP);if(!t.isCE&&t.appContext.app!=null&&!t.appContext.app.__VUE_I18N_SYMBOL__)throw ve(ge.NOT_INSTALLED);const n=Gf(t),r=Xf(n),l=No(t),s=Bf(e,l);if(__VUE_I18N_LEGACY_API__&&n.mode==="legacy"&&!e.__useComponent){if(!n.allowComposition)throw ve(ge.NOT_AVAILABLE_IN_LEGACY_MODE);return Zf(t,s,r,e)}if(s==="global")return So(r,e,l),r;if(s==="parent"){let a=Jf(n,t,e.__useComponent);return a==null&&(a=r),a}const i=n;let o=i.__getInstance(t);if(o==null){const a=Le({},e);"__i18n"in l&&(a.__i18n=l.__i18n),r&&(a.__root=r),o=Is(a),i.__composerExtend&&(o[Br]=i.__composerExtend(o)),Qf(i,t,o),i.__setInstance(t,o)}return o}function Yf(e,t,n){const r=Ho();{const l=__VUE_I18N_LEGACY_API__&&t?r.run(()=>Xr(e)):r.run(()=>Is(e));if(l==null)throw ve(ge.UNEXPECTED_ERROR);return[r,l]}}function Gf(e){{const t=bn(e.isCE?Hf:e.appContext.app.__VUE_I18N_SYMBOL__);if(!t)throw ve(e.isCE?ge.NOT_INSTALLED_WITH_PROVIDE:ge.UNEXPECTED_ERROR);return t}}function Bf(e,t){return ur(e)?"__i18n"in t?"local":"global":e.useScope?e.useScope:"local"}function Xf(e){return e.mode==="composition"?e.global:e.global.__composer}function Jf(e,t,n=!1){let r=null;const l=t.root;let s=qf(t,n);for(;s!=null;){const i=e;if(e.mode==="composition")r=i.__getInstance(s);else if(__VUE_I18N_LEGACY_API__){const o=i.__getInstance(s);o!=null&&(r=o.__composer,n&&r&&!r[Oo]&&(r=null))}if(r!=null||l===s)break;s=s.parent}return r}function qf(e,t=!1){return e==null?null:t&&e.vnode.ctx||e.parent}function Qf(e,t,n){ds(()=>{},t),_s(()=>{const r=n;e.__deleteInstance(t);const l=r[Br];l&&(l(),delete r[Br])},t)}function Zf(e,t,n,r={}){const l=t==="local",s=fi(null);if(l&&e.proxy&&!(e.proxy.$options.i18n||e.proxy.$options.__i18n))throw ve(ge.MUST_DEFINE_I18N_OPTION_IN_ALLOW_COMPOSITION);const i=J(r.inheritLocale)?r.inheritLocale:!$(r.locale),o=Ot(!l||i?n.locale.value:$(r.locale)?r.locale:rn),a=Ot(!l||i?n.fallbackLocale.value:$(r.fallbackLocale)||ae(r.fallbackLocale)||G(r.fallbackLocale)||r.fallbackLocale===!1?r.fallbackLocale:o.value),d=Ot(_r(o.value,r)),_=Ot(G(r.datetimeFormats)?r.datetimeFormats:{[o.value]:{}}),h=Ot(G(r.numberFormats)?r.numberFormats:{[o.value]:{}}),b=l?n.missingWarn:J(r.missingWarn)||Ct(r.missingWarn)?r.missingWarn:!0,I=l?n.fallbackWarn:J(r.fallbackWarn)||Ct(r.fallbackWarn)?r.fallbackWarn:!0,M=l?n.fallbackRoot:J(r.fallbackRoot)?r.fallbackRoot:!0,D=!!r.fallbackFormat,w=ie(r.missing)?r.missing:null,F=ie(r.postTranslation)?r.postTranslation:null,j=l?n.warnHtmlMessage:J(r.warnHtmlMessage)?r.warnHtmlMessage:!0,T=!!r.escapeParameter,E=l?n.modifiers:G(r.modifiers)?r.modifiers:{},S=r.pluralRules||l&&n.pluralRules;function y(){return[o.value,a.value,d.value,_.value,h.value]}const k=Ye({get:()=>s.value?s.value.locale.value:o.value,set:f=>{s.value&&(s.value.locale.value=f),o.value=f}}),W=Ye({get:()=>s.value?s.value.fallbackLocale.value:a.value,set:f=>{s.value&&(s.value.fallbackLocale.value=f),a.value=f}}),U=Ye(()=>s.value?s.value.messages.value:d.value),te=Ye(()=>_.value),he=Ye(()=>h.value);function X(){return s.value?s.value.getPostTranslationHandler():F}function ue(f){s.value&&s.value.setPostTranslationHandler(f)}function lt(){return s.value?s.value.getMissingHandler():w}function bt(f){s.value&&s.value.setMissingHandler(f)}function se(f){return y(),f()}function ee(...f){return s.value?se(()=>Reflect.apply(s.value.t,null,[...f])):se(()=>"")}function q(...f){return s.value?Reflect.apply(s.value.rt,null,[...f]):""}function De(...f){return s.value?se(()=>Reflect.apply(s.value.d,null,[...f])):se(()=>"")}function qe(...f){return s.value?se(()=>Reflect.apply(s.value.n,null,[...f])):se(()=>"")}function pe(f){return s.value?s.value.tm(f):{}}function be(f,v){return s.value?s.value.te(f,v):!1}function Et(f){return s.value?s.value.getLocaleMessage(f):{}}function vt(f,v){s.value&&(s.value.setLocaleMessage(f,v),d.value[f]=v)}function Ft(f,v){s.value&&s.value.mergeLocaleMessage(f,v)}function He(f){return s.value?s.value.getDateTimeFormat(f):{}}function it(f,v){s.value&&(s.value.setDateTimeFormat(f,v),_.value[f]=v)}function ot(f,v){s.value&&s.value.mergeDateTimeFormat(f,v)}function Tt(f){return s.value?s.value.getNumberFormat(f):{}}function Fe(f,v){s.value&&(s.value.setNumberFormat(f,v),h.value[f]=v)}function at(f,v){s.value&&s.value.mergeNumberFormat(f,v)}const ct={get id(){return s.value?s.value.id:-1},locale:k,fallbackLocale:W,messages:U,datetimeFormats:te,numberFormats:he,get inheritLocale(){return s.value?s.value.inheritLocale:i},set inheritLocale(f){s.value&&(s.value.inheritLocale=f)},get availableLocales(){return s.value?s.value.availableLocales:Object.keys(d.value)},get modifiers(){return s.value?s.value.modifiers:E},get pluralRules(){return s.value?s.value.pluralRules:S},get isGlobal(){return s.value?s.value.isGlobal:!1},get missingWarn(){return s.value?s.value.missingWarn:b},set missingWarn(f){s.value&&(s.value.missingWarn=f)},get fallbackWarn(){return s.value?s.value.fallbackWarn:I},set fallbackWarn(f){s.value&&(s.value.missingWarn=f)},get fallbackRoot(){return s.value?s.value.fallbackRoot:M},set fallbackRoot(f){s.value&&(s.value.fallbackRoot=f)},get fallbackFormat(){return s.value?s.value.fallbackFormat:D},set fallbackFormat(f){s.value&&(s.value.fallbackFormat=f)},get warnHtmlMessage(){return s.value?s.value.warnHtmlMessage:j},set warnHtmlMessage(f){s.value&&(s.value.warnHtmlMessage=f)},get escapeParameter(){return s.value?s.value.escapeParameter:T},set escapeParameter(f){s.value&&(s.value.escapeParameter=f)},t:ee,getPostTranslationHandler:X,setPostTranslationHandler:ue,getMissingHandler:lt,setMissingHandler:bt,rt:q,d:De,n:qe,tm:pe,te:be,getLocaleMessage:Et,setLocaleMessage:vt,mergeLocaleMessage:Ft,getDateTimeFormat:He,setDateTimeFormat:it,mergeDateTimeFormat:ot,getNumberFormat:Tt,setNumberFormat:Fe,mergeNumberFormat:at};function m(f){f.locale.value=o.value,f.fallbackLocale.value=a.value,Object.keys(d.value).forEach(v=>{f.mergeLocaleMessage(v,d.value[v])}),Object.keys(_.value).forEach(v=>{f.mergeDateTimeFormat(v,_.value[v])}),Object.keys(h.value).forEach(v=>{f.mergeNumberFormat(v,h.value[v])}),f.escapeParameter=T,f.fallbackFormat=D,f.fallbackRoot=M,f.fallbackWarn=I,f.missingWarn=b,f.warnHtmlMessage=j}return Li(()=>{if(e.proxy==null||e.proxy.$i18n==null)throw ve(ge.NOT_AVAILABLE_COMPOSITION_IN_LEGACY);const f=s.value=e.proxy.$i18n.__composer;t==="global"?(o.value=f.locale.value,a.value=f.fallbackLocale.value,d.value=f.messages.value,_.value=f.datetimeFormats.value,h.value=f.numberFormats.value):l&&m(f)}),ct}const zf=["locale","fallbackLocale","availableLocales"],$l=["t","rt","d","n","tm","te"];function ed(e,t){const n=Object.create(null);return zf.forEach(l=>{const s=Object.getOwnPropertyDescriptor(t,l);if(!s)throw ve(ge.UNEXPECTED_ERROR);const i=Ie(s.value)?{get(){return s.value.value},set(o){s.value.value=o}}:{get(){return s.get&&s.get()}};Object.defineProperty(n,l,i)}),e.config.globalProperties.$i18n=n,$l.forEach(l=>{const s=Object.getOwnPropertyDescriptor(t,l);if(!s||!s.value)throw ve(ge.UNEXPECTED_ERROR);Object.defineProperty(e.config.globalProperties,`$${l}`,s)}),()=>{delete e.config.globalProperties.$i18n,$l.forEach(l=>{delete e.config.globalProperties[`$${l}`]})}}Pf();__INTLIFY_JIT_COMPILATION__?bl(yf):bl(Lf);mf(Xu);hf(co);if(__INTLIFY_PROD_DEVTOOLS__){const e=pt();e.__INTLIFY__=!0,rf(e.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__)}const td=(e,t)=>{const n=e.__vccOpts||e;for(const[r,l]of t)n[r]=l;return n},nd={class:"curriculum_vitae"},rd={class:"sticky_title"},sd={class:"module"},ld={class:"label"},id={class:"sticky_title"},od={class:"module"},ad={class:"skill_item"},cd={__name:"App",setup(e){const{locale:t}=mr(),n=ll.personalInformation,r=ll.skillIntroduction,l=Ot("zh-CN"),s=Ot("light"),i=a=>{const d=a.target.value;t.value=d,document.documentElement.setAttribute("lang",d),localStorage.setItem("lang",d)},o=a=>{const d=a.target.value;document.documentElement.setAttribute("data-theme",d),localStorage.setItem("theme",d)};return ds(()=>{l.value=localStorage.getItem("lang")||"zh-CN",t.value=l.value,s.value=localStorage.getItem("theme")||"light",document.documentElement.setAttribute("data-theme",s.value)}),(a,d)=>(on(),an(Me,null,[_e("header",null,[d[6]||(d[6]=_e("label",{for:"language"},"语言：",-1)),Rs(_e("select",{"onUpdate:modelValue":d[0]||(d[0]=_=>l.value=_),name:"语言",id:"language",onChange:d[1]||(d[1]=_=>i(_))},d[4]||(d[4]=[_e("option",{value:"zh-CN"},"中文",-1),_e("option",{value:"en-US"},"English",-1)]),544),[[nl,l.value]]),d[7]||(d[7]=_e("label",{for:"theme"},"主题：",-1)),Rs(_e("select",{"onUpdate:modelValue":d[2]||(d[2]=_=>s.value=_),name:"主题",id:"theme",onChange:d[3]||(d[3]=_=>o(_))},d[5]||(d[5]=[_e("option",{value:"light"},"浅色",-1),_e("option",{value:"dark"},"深色",-1)]),544),[[nl,s.value]])]),_e("div",nd,[_e("div",rd,[_e("h4",null,$t(a.$t(fn(n).title)),1)]),_e("div",sd,[(on(!0),an(Me,null,Ms(fn(n).content,(_,h)=>(on(),an("div",{class:"info_item",key:h},[_e("span",ld,$t(a.$t(_.label))+":",1),_e("span",null,$t(a.$t(_.value)),1)]))),128))]),_e("div",id,[_e("h4",null,$t(a.$t(fn(r).title)),1)]),_e("div",od,[(on(!0),an(Me,null,Ms(fn(r).content,(_,h)=>(on(),an("div",ad,$t(h+1)+":"+$t(a.$t(_.label)),1))),256))]),d[8]||(d[8]=mc('<div class="sticky_title" data-v-b950b38f><h4 data-v-b950b38f>工作经历</h4></div><div class="module" data-v-b950b38f><div class="job_item" data-v-b950b38f><div class="job_header" data-v-b950b38f><div class="job_title" data-v-b950b38f>北京南天信息</div><div class="job_time" data-v-b950b38f>2023.02.27</div><span data-v-b950b38f>-</span><div class="job_time" data-v-b950b38f>至今</div></div><div class="job_content" data-v-b950b38f><div class="job_content_item" data-v-b950b38f> 1.主要负责中银金科及软件中心前端开发 </div><div class="job_content_item" data-v-b950b38f> 2.技术栈：Vue、Element Ui、micro-app微前端框架 </div><div class="job_content_item" data-v-b950b38f> 3.开发的项目有企架、COMS、COSS_JK、ccpsbnd征信、行家（移动端）等 </div></div></div><div class="job_item" data-v-b950b38f><div class="job_header" data-v-b950b38f><div class="job_title" data-v-b950b38f>北京中软国际科技服务有限公司</div><div class="job_time" data-v-b950b38f>2020.12</div><span data-v-b950b38f>-</span><div class="job_time" data-v-b950b38f>2023.2</div></div><div class="job_content" data-v-b950b38f><div class="job_content_item" data-v-b950b38f> 1.主要负责平安壹账通数据架构组前端开发并和产品充分沟通进行迭代开发 </div><div class="job_content_item" data-v-b950b38f> 2.技术栈：Vue、ElementUi、Echarts、SpreadJs、Antv-g2、Antv-g6等 </div><div class="job_content_item" data-v-b950b38f> 3.开发的项目有RMS、数据填报、数据融合、标签管理、数据流计算等 </div></div></div><div class="job_item" data-v-b950b38f><div class="job_header" data-v-b950b38f><div class="job_title" data-v-b950b38f>上海东方希杰商务有限公司</div><div class="job_time" data-v-b950b38f>2020.6</div><span data-v-b950b38f>-</span><div class="job_time" data-v-b950b38f>2020.11</div></div><div class="job_content" data-v-b950b38f><div class="job_content_item" data-v-b950b38f> 1.主要负责东方购物官网和MobileWeb中商品详情模板的开发 </div><div class="job_content_item" data-v-b950b38f> 2.技术栈：Vue、Vant等 </div><div class="job_content_item" data-v-b950b38f> 3.负责商品详情SKU、商品直播等模块及IOS和原生的页面嵌套工作 </div></div></div><div class="job_item" data-v-b950b38f><div class="job_header" data-v-b950b38f><div class="job_title" data-v-b950b38f>苏州采微互联科技有限公司</div><div class="job_time" data-v-b950b38f>2019.4</div><span data-v-b950b38f>-</span><div class="job_time" data-v-b950b38f>2020.2</div></div><div class="job_content" data-v-b950b38f><div class="job_content_item" data-v-b950b38f> 1.主要负责采微供应链系统中仓库管理和容器管理模块 </div><div class="job_content_item" data-v-b950b38f> 2.技术栈：Vue、ElementUi、微信小程序等 </div></div></div><div class="job_item" data-v-b950b38f><div class="job_header" data-v-b950b38f><div class="job_title" data-v-b950b38f>河南超构网络科技有限公司</div><div class="job_time" data-v-b950b38f>2017.12</div><span data-v-b950b38f>-</span><div class="job_time" data-v-b950b38f>2019.2</div></div><div class="job_content" data-v-b950b38f><div class="job_content_item" data-v-b950b38f> 1.主要负责开发企业官网并参与后台管理系统的开发 </div><div class="job_content_item" data-v-b950b38f> 2.技术栈：Vue、iView </div><div class="job_content_item" data-v-b950b38f> 3.负责商品详情SKU、商品直播等模块及IOS和原生的页面嵌套工作 </div></div></div></div><div class="sticky_title" data-v-b950b38f><h4 data-v-b950b38f>项目经验</h4></div><div class="module" data-v-b950b38f> era中银香港项目--2023年10月底 综合经营服务管理COMS--2023年11月 COSS_JK ccpsbnd--征信 </div>',4))])],64))}},ud=td(cd,[["__scopeId","data-v-b950b38f"]]),fd={personalInformation:"Personal Information",personal:{name:"Name",nameRes:"Du Xinxin",educationBackground:"Education Background",educationBackgroundRes:"Associate Degree",major:"Major",majorRes:"Computer Application",phone:"Phone",phoneRes:"17751216596",email:"Email",emailRes:"1746215067{'@'}qq.com"},skillIntroduction:"Skill Introduction",skill:{html:"Proficient in HTML5, CSS3, JavaScript and new features",ui:"Proficient in using third-party UI frameworks such as Echarts, Antv, Elementui, and Vant iView"}},dd={personalInformation:"个人信息",personal:{name:"姓名",nameRes:"杜欣欣",educationBackground:"学历",educationBackgroundRes:"专科",major:"专业",majorRes:"计算机应用",phone:"电话",phoneRes:"17751216596",email:"邮箱",emailRes:"1746215067{'@'}qq.com"},skillIntroduction:"技能介绍",skill:{html:"精通HTML5、CSS3、JavaScript及新特性",ui:"熟练使用第三方UI框架：Echarts、Antv、Elementui、Vant、iView等"}},_d=new Kf({legacy:!1,locale:"zh-CN",messages:{"en-US":fd,"zh-CN":dd}});Gc(ud).use(_d).mount("#app");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
